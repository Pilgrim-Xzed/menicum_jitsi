{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/../strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/../js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/../js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/../js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/../events/events.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/../sdp-transform/lib/index.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/../webpack/buildin/global.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/../sdp/sdp.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/../lodash.clonedeep/index.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/../process/browser.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/../lodash.isequal/index.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/../js-utils/node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/../webpack/buildin/module.js","webpack://JitsiMeetJS/../sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/../bowser/es5.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/../rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/../async/lib/async.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/detection/TalkMutedDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedNotification.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/Worker.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/rttmonitor/rttmonitor.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/qualitycontrol/QualityController.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/../webpack/buildin/amd-options.js","webpack://JitsiMeetJS/../current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/../sdp-transform/lib/parser.js","webpack://JitsiMeetJS/../sdp-transform/lib/writer.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/../timers-browserify/main.js","webpack://JitsiMeetJS/../setimmediate/setImmediate.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/filtericeservers.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","INVITE_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PEERCONNECTION_READY","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","AVATAR_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","BrowserCapabilities","Logger","require","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","dispose","size","emit","callStats","values","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createRttByRegionEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","IS_SELECTED_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferVideoCodec","codecName","payloadType","rtp","codec","payload","payloadTypes","payloads","payloadIndex","unshift","stripVideoCodec","removePts","rtxApts","item","rtxPts","fmtp","config","keepPts","rtcpFb","AUDIO","PRESENTER","VIDEO","usesAdapter","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevices","availableDevicesPollTimer","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafari","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","isElectron","screenShareAudio","desktopStream","chromeMediaSource","chromeMediaSourceId","bandwidth","firefox_fake_device","fake","screen","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","label","RTCUtils","Listenable","super","clearInterval","enumerateDevices","navigator","mediaDevices","then","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","getTrackID","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","updateKnownDevices","pds","devicesReceived","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","slice","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","p2pPcConstraints","Promise","resolve","reject","getUserMedia","catch","_newGetUserMediaWithConstraints","umDevices","_newGetDesktopMedia","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","obtainAudioAndVideoPermissions","devices","includes","_getAudioAndVideoStreams","streams","audioStream","videoStream","res","audioVideo","addTrack","desktop","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","desktopSharingSources","gumOptions","trackOptions","newObtainAudioAndVideoPermissions","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","getTracks","applyConstraints","maybeRequestCaptureDevices","requestedCaptureDevices","autoGainControl","noiseSuppression","newGetConstraints","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","effects","isDeviceChangeAvailable","deviceType","mediaStream","release","url","revokeObjectURL","isDesktopSharingEnabled","setAudioOutputDevice","getAudioOutputDevice","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","rtcUtils","origAttachMediaStream","apply","ex","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","createLocalTracks","tracksInfo","newTracks","trackInfo","safeCounterIncrement","localTrack","JitsiLocalTrack","rtcId","_newCreateLocalTracks","mediaStreamMetaData","metaData","getSettings","RTC","conference","peerConnections","localTracks","_channel","_channelOpen","_lastN","_lastNEndpoints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","addListener","destroy","_channelOpenListener","initializeBridgeChannel","wsUrl","BridgeChannel","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","JitsiConferenceEvents","onCallEnded","setReceiverVideoConstraint","maxFrameHeight","selectEndpoints","ids","pinEndpoint","eventType","createPeerConnection","signaling","iceConfig","isP2P","getPCConstraints","abtestSuspendVideo","addPermanentProperties","supportsInsertableStreams","forceEncodedAudioInsertableStreams","forceEncodedVideoInsertableStreams","supportsSdpSemantics","sdpSemantics","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLastN","getLocalVideoTrack","localVideo","getLocalTracks","getLocalAudioTrack","localAudio","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","removeLocalTrack","pos","removeRemoteTracks","owner","removedTracks","pcRemovedTracks","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","setLastN","remoteAudioTracks","setAudioOutput","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","getName","isOpera","isIExplorer","isNWJS","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","jitsiLocalStorage","storage","localStorage","keyName","keyValue","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","number","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","each","_","fb","hasAttribute","fromJingle","jingle","sessionId","groups","$","contents","content","jingle2media","sctp","streamCount","__","parameter","hdrExt","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackErrors","constraint","failedConstraintName","getResolutionFromFailedConstraint","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","emitter","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","listeners","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","removeEventListener","WRONG_STATE","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","msid","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","order","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","configParams","_traceAndCatchBackendCalls","applicationVersion","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","_callStatsUserName","_machineId","_p8","username","UsernameGenerator","generateUsername","generateCallStatsUserName","jitsiMeetId","generateJitsiMeetId","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","getConnectionPluginDefinition","base","ConnectionPluginListenable","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","enableWebsocketResume","serviceUrl","websocketKeepAlive","XmppConnection","createConnection","bosh","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","enableLipSync","rayo","isPingSupported","_pingSupported","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","useStunTurn","p2p","getStunAndTurnCredentials","_resetState","pingJid","getFeaturesAndIdentities","identities","PING","ping","startInterval","identity","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","_onPrivateMessage","password","JitsiConnectionEvents","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","attaching","anonymousdomain","hosts","configDomain","hostname","createRoom","roomName","onCreateResource","roomjid","customDomain","muc","mucNickname","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","getSessions","sessions","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2pStunServers","stunServers","iceTransportPolicy","MucConnectionPlugin","JingleConnectionPlugin","PingConnectionPlugin","RayoConnectionPlugin","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","CONN_STATUS_CHANGED","_options","_resumeRetryN","_stropheConn","_usesWebsocket","_lastSuccessTracker","LastSuccessTracker","startTracking","_deferredIQs","_status","disco","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_maybeStartWSKeepAlive","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","Events","_clearDeferredIQs","deferred","closeWebsocket","_resumeTimeout","streamManagement","getResumeToken","intervalWithJitter","fetch","timeLeft","sendIQ2","sendBeacon","resumeToken","retryTimeout","getJitterDelay","ENVIRONMENT","gumFunction","ScreenObtainer","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","JitsiMeetScreenObtainer","openDesktopPicker","streamType","onGetStreamResponse","errorCallback","getDisplayMedia","applyConstraintsPromise","videoTrack","g","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","parseSctpDescription","maxMessageSize","maxSizeLine","sctpPort","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","enableLayerSuspension","testing","startSilent","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","reconnect","iceStarted","onnegotiationneeded","remoteDescription","usesUnifiedPlan","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","setChatRoom","isSelected","setIsSelected","getRemoteRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","replaceTransport","jingleOfferElem","originalOffer","clone","remove","newFingerprint","sendTransportAccept","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","_processRemoteRemoveSource","offerIq","remoteSdp","removeSsrcInfo","usesPlanB","findIndex","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","isVideoTrack","clearRecvonlySsrc","shouldRenegotiate","newLocalSDP","setMaxBitRate","sourceRemoveElem","ssrcLines","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","clear","finishCallback","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","argsTag","funcTag","genTag","mapTag","setTag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","Uint8Array","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","entry","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isObjectLike","isArrayLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","isIndex","assignValue","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","getTag","isFunc","buffer","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","dataView","byteOffset","byteLength","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","symbol","initCloneByTag","stacked","props","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","baseIsNative","isFunction","arrayBuffer","newValue","getMapData","getValue","cache","pairs","LARGE_ARRAY_SIZE","other","ArrayBuffer","ctorString","isLength","baseKeys","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","versions","binding","cwd","chdir","dir","umask","AudioContext","webkitAudioContext","LocalStatsCollector","interval","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","currentExecutingScript","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","isWebRTCTrackMuted","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","active","getMSID","trackId","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","_destroyed","E2E_RTT_CHANGED","objectTag","typedArrayTags","freeProcess","nodeUtil","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","isArg","isBuff","isType","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","othLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","isMasked","arrLength","seen","arrValue","othIndex","resIndex","arrayFilter","baseUnary","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","ERROR_FEATURE_VERSION_MISMATCH","compareIdentities","some","generateSha","sortedIdentities","accumulatedValue","sortedFeatures","feature","versionToCapabilities","jidToVersion","rooms","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","submit","_generateVersion","removeFeature","getFeatures","_getDiscoInfo","sha","receivedNode","category","_fixChatRoomPresenceMap","addToPresence","_notifyVersionChanged","_identities","_features","oldVersion","ON","OFF","SIM_LAYER_RIDS","TPCUtils","simulcastEncodings","scaleResolutionDownBy","simulcastStreamConstraints","_ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","sources","_getStreamEncodings","isSimulcastOn","_insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","_setSimulcastStreamConstraints","encoding","transceiverInit","sendEncodings","addTransceiver","getTransceivers","addStream","setEncodings","sender","stopped","localSSRCs","_addedStreams","_extractPrimarySSRC","getParameters","encodings","setParameters","transceivers","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","IDENTITY_UPDATED","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","crypto","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","_setEffectInProgress","effect","isEnabled","_startStreamEffect","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","removeTrack","_queueSetMuted","setMuted","_setMuted","logMuteInfo","doesVideoMuteByStreamRemove","enabled","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","assign","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","_setConference","_onByteSentStatsReceived","bytesSent","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","_trackMuteChanged","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","children","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","isDevicePermissionGranted","supported","promises","results","every","permissionStatus","isMultipleAudioInputSupported","emitEvent","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","download","Blob","href","click","getRecordingResults","getFileType","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","allSettled","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","OPEN","colibriClass","msgPayload","jsonObject","lastN","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","supportsP2P","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","ondevicechange","supportsLocalCandidateRttStatistics","supportsRTTStatistics","RTCRtpTransceiver","_getChromiumBasedVersion","RTCRtpSender","createEncodedStreams","createEncodedVideoStreams","chromium","ua","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","reverse","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","configurable","writable","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","f","isBrowser","compareVersion","isEngine","is","92","93","versionName","94","vendor","model","95","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","statsInterval","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","getStats","processNewAudioLevelReport","processAudioLevelReport","processNewStatsReport","processStatsReport","itemStatByKey","stat","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","receiveBandwidth","sendBandwidth","localCandidateType","localip","remoteCandidateType","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","packetsLost","bytesReceivedNow","bytesReceivedBefore","bytesReceived","nowBytesTransmitted","timeMs","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","audioCodec","videoBitrateDownload","videoBitrateUpload","videoCodec","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","localIp","networkType","currentRoundTripTime","framerateMean","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","getLocalSSRC","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidStateError","InvalidAccessError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","Event","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","onaddstream","ontrack","onremovestream","onconnectionstatechange","onicegatheringstatechange","ondatachannel","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","removeStream","getSenders","getReceivers","_createIceGatherer","bufferedCandidateEvents","bufferCandidates","end","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","RTCRtpReceiver","getCapabilities","isNewTrack","nativeTrack","removeTrackFromStreamAndFireEvent","states","checking","completed","disconnected","failed","new","connecting","numAudioTracks","numVideoTracks","offerOptions","offerToReceiveAudio","offerToReceiveVideo","remoteCodec","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","selector","MediaStreamTrack","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeMethod","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","SignalingEvents","_peerMutedChanged","tpcUtils","updateLog","statsinterval","interop","Interop","Simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","trace","what","time","_remoteStreamAdded","_remoteStreamRemoved","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","_processStat","senderVideoMaxHeight","maybeSetSenderVideoConstraints","statValue","endTime","times","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","_setVideoType","setMute","endpoints","endpointTrackMap","mediaTrack","getSSRC","findTrackById","onaddtrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","getSSRCOwner","peerMediaInfo","getPeerMediaInfo","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","changed","videoMedia","enforceSendRecv","transformStreamIdentifiers","prop","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","isMediaStreamInPc","findSenderByKind","findSenderByStream","findReceiverForTrack","findSenderForTrack","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","toUnifiedPlan","presenterEnabled","mungeRemoteDescription","currentDescription","localVideoTrack","encodingsEnabledState","videoSender","aspectRatio","toPrecision","sendTones","tones","duration","interToneGap","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","hasCameraTrack","peerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","groupSSRCs","extractSSRCMap","_processLocalSSRCsMap","handleFailure","oaPromise","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","simIndex","handleLayerSuspension","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_addMutedLocalVideoTracksToSDP","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","modifyRtxSsrcs2","_transformMediaIdentifiers","pcId","streamAndTrackIDs","sessionDesc","audioMLine","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","injectRecvOnly","newPrimarySsrc","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","AuthUtil","getTokenAuthUrl","urlPattern","roleUpgrade","JitsiConnection","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","JitsiConference","eventManager","JitsiConferenceEventManager","_init","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","_e2eeCtx","E2EEContext","resourceCreator","isAuthenticatedUser","setupXMPPListeners","_statsCurrentId","statisticsId","Settings","callStatsUserName","statsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","rttMonitor","RttMonitor","e2eping","E2ePing","setupRTCListeners","qualityController","QualityController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","DetectionEvents","_talkWhileMutedDetection","TalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","VADNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","setLocalParticipantProperty","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","_delayedIceFailed","cancel","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","_getMediaSessions","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","getFromPresence","sendPrivateTextMessage","sendPrivateMessage","sendCommand","sendCommandOnce","removeCommand","removeFromPresence","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","_setupSenderE2EEForTrack","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","setVideoMute","addAsUnmutePromises","removeAsMutePromises","getRole","isHidden","hiddenDomain","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","pinParticipant","isInteger","isVideoActive","getParticipantCount","countHidden","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","nick","statsID","botType","JitsiParticipant","_role","_botType","_updateFeatures","_maybeStartOrStopP2P","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_setupReceiverE2EEForTrack","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","errorMsg","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","bridgeChannelType","openBridgeChannel","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","getMeetingUniqueId","getMeetingId","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","getLogs","metadata","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","overallFeedback","detailedFeedback","remoteUserId","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","enableIceRestart","IceFailedNotification","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","isEqual","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","meetingId","isE2EESupported","setE2EEKey","setKey","isLobbySupported","getLobby","isMembersOnly","membersOnlyEnabled","enableLobby","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","handleSender","handleReceiver","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","forward","setParticipantPropertyListener","recorderSession","logObject","AuthenticationEvents","txt","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","dest","srcEvent","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","_identity","getConference","jitsiTrack","oldValue","isAudioMuted","_isMediaTypeMuted","_getFeaturesPromise","getBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","ChatRoom","doLeave","createNonAnonymousRoom","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","members","presHandlers","_removeConnListeners","noBridgeAvailable","Moderator","lobby","Lobby","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","addVideoInfoToPresence","presenceUpdateTime","customJoinPresenceExtensions","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","presenceSyncTime","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","disableDiscoInfo","getForm","form","formSubmit","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","newRole","_initFocus","memberOfThis","displayJids","att","phone","pin","processNode","tagHandlers","nickname","onParticipantLeft","skipEvents","onMucMemberLeft","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","subjectText","stamp","dateParts","passwordSelect","lobbyRoomNode","lobbyRoomJid","kickIQ","onError","onNotSupported","formsubmit","setMembersOnly","sendGrantMembershipIq","grantMembership","formToSubmit","handlerIdx","getMemberRole","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","getMediaPresenceInfo","mutedNode","videoTypeNode","isSipGatewayEnabled","iqToFocus","clean","onMucLeft","doReject","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoom","_leaveLobbyRoom","avatar","invitePassword","memberRoomJid","msgToSend","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","openSctp","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","opusMaxAverageBitrate","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","retry","minDelay","LastRequestTracker","_lastSuccess","stropheConnection","originalRawInput","ConnectionPlugin","jvbIceConfig","p2pIceConfig","onJingle","fromJid","ack","sess","startMuted","successTime","me","iceservers","dict","credential","temp","useTurnUdp","char","getState","addSources","removeSources","SignalingLayer","ssrcOwners","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_queue","_processQueueTasks","_stopped","kill","task","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","errStatusCapture","failedPings","pingExecIntervals","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","onRayo","roomPass","callResource","StropheLogger","logIncoming","logOutgoing","_audioLevel","myUserID","_eventFired","_isLocalAudioTrack","_processing","_scoreArray","_active","_calculateVADScore","_setActiveState","_processTimeout","_audioLvlArray","_calculateNoisyScore","scoreAvg","audioLevelAvg","_recordValues","avgAudioLvl","posAudioLevels","_timeoutTrigger","_hasAudioInput","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_audioTrack","kSimulcastFormats","layers","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_canceled","jvbConnection","jvbConnIceState","_iceFailedTimeout","kJitsiE2EE","E2EEcontext","_worker","Worker","createWorkerScript","encoder","TextEncoder","postMessage","operation","encode","receiverStreams","createEncodedAudioStreams","readableStream","writableStream","senderStreams","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","PCMonitor","getStatsIntervalMs","getStatsInterval","rtts","startStatsInterval","handleCandidateRtt","rttTotal","candidateKey","responsesReceived","requestsSent","rttTotalDiff","responsesReceivedDiff","requestsResponsesDiff","pcMonitors","startPCMonitors","initialDelay","AverageStatReport","addNext","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","_onMediaSessionStarted","_propagateSendMaxFrameHeight","mediaSession","preferredReceiveMaxFrameHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","ProxyConnectionService","jitsiConnection","otherOptions","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","clonedeep","bundle","mids","msidSemantic","semantic","current","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","inactiveMid","cmLine","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiMeetJS","constants","recording","recordingConstants","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","oldResolution","newResolution","resName","getLowerResolution","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","isCollectingLocalStats","lineno","colno","hint","contentHint","util","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","currentScript","thrownErr","near","far","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","TranscriptionService","Word","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","audioBlob","getWord","getBeginTime","getEndTime","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","supportsUnifiedPlan","val","compactObject","isEmptyObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","endsWith","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","shimAddTrackRemoveTrackWithNative","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","addIceCandidateNullSupported","nativeAddIceCandidate","fixNegotiationNeeded","origMSTEnabled","RTCDtmfSender","RTCDTMFSender","RTCPeerConnectionShim","shimRTCPeerConnection","validTurn","shimReplaceTrack","setTrack","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","preferredMediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","audioTransceiver","setDirection","videoTransceiver","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeAllowExtmapMixed","nativeSRD","adapter","shimChrome","shimFirefox","shimEdge","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","edgeShim","safariShim","adapterFactory"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 137);\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n    PEERCONNECTION_READY: 'xmpp.peerconnection_ready',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * A participant avatar has changed.\n */\nexport const AVATAR_CHANGED = 'conference.avatarChanged';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","import EventEmitter from 'events';\n\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport RTPStats from './RTPStatsCollector';\n\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as StatisticsEvents from '../../service/statistics/Events';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl\n                || 'https://api.callstats.io/static/callstats-ws.min.js',\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function() {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted'\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\n\n    IS_SELECTED_CHANGED: 'rtc.is_selected_change',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport RandomUtil from '../util/RandomUtil';\nimport browser from '../browser';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by\n     *  moving it to the beginning of the payload types\n     *  list (modifies the given mline in place).  If there\n     *  are multiple options within the same codec (multiple h264\n     *  profiles, for instance), this will prefer the first one\n     *  that is found.\n     * @param {object} videoMLine the video mline object from\n     *  an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferVideoCodec(videoMLine, codecName) {\n        let payloadType = null;\n\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        for (let i = 0; i < videoMLine.rtp.length; ++i) {\n            const rtp = videoMLine.rtp[i];\n\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                payloadType = rtp.payload;\n                break;\n            }\n        }\n        if (payloadType) {\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const payloadTypes\n                = videoMLine.payloads\n                    .toString()\n                    .split(' ')\n                    .map(p => parseInt(p, 10));\n            const payloadIndex = payloadTypes.indexOf(payloadType);\n\n            payloadTypes.splice(payloadIndex, 1);\n            payloadTypes.unshift(payloadType);\n            videoMLine.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} videoMLine the video mline object from an sdp as parsed\n     * by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     */\n    stripVideoCodec(videoMLine, codecName) {\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        const removePts = [];\n\n        for (const rtp of videoMLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                removePts.push(rtp.payload);\n            }\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = videoMLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = videoMLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other video codecs, disable the stream.\n                videoMLine.port = 0;\n                videoMLine.direction = 'inactive';\n                videoMLine.payloads = '*';\n            } else {\n                videoMLine.payloads = keepPts.join(' ');\n            }\n\n            videoMLine.rtp = videoMLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            videoMLine.fmtp = videoMLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (videoMLine.rtcpFb) {\n                videoMLine.rtcpFb = videoMLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport screenObtainer from './ScreenObtainer';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default resolution to obtain for video tracks if no resolution is specified.\n * This default is used for old gum flow only, as new gum flow uses\n * {@link DEFAULT_CONSTRAINTS}.\n */\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\n\n/**\n * Default devices to obtain when no specific devices are specified. This\n * default is used for old gum flow only.\n */\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 240\n        }\n    }\n};\n\n/**\n * The default frame rate for Screen Sharing.\n */\nconst SS_DEFAULT_FRAME_RATE = 5;\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Disables Highpass Filter\nlet disableHPF = false;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices;\nlet availableDevicesPollTimer;\n\n/**\n * Initialize wrapper function for enumerating devices.\n * TODO: remove this, it should no longer be needed.\n *\n * @returns {?Function}\n */\nfunction initEnumerateDevicesWithCallback() {\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n        return callback => {\n            navigator.mediaDevices.enumerateDevices()\n                .then(callback, () => callback([]));\n        };\n    }\n}\n\n/**\n *\n * @param constraints\n * @param isNewStyleConstraintsSupported\n * @param resolution\n */\nfunction setResolutionConstraints(\n        constraints,\n        isNewStyleConstraintsSupported,\n        resolution) {\n    if (Resolutions[resolution]) {\n        if (isNewStyleConstraintsSupported) {\n            constraints.video.width = {\n                ideal: Resolutions[resolution].width\n            };\n            constraints.video.height = {\n                ideal: Resolutions[resolution].height\n            };\n        }\n\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\n    }\n\n    if (constraints.video.mandatory.minWidth) {\n        constraints.video.mandatory.maxWidth\n            = constraints.video.mandatory.minWidth;\n    }\n\n    if (constraints.video.mandatory.minHeight) {\n        constraints.video.mandatory.maxHeight\n            = constraints.video.mandatory.minHeight;\n    }\n}\n\n/**\n * @param {string[]} um required user media types\n *\n * @param {Object} [options={}] optional parameters\n * @param {string} options.resolution\n * @param {number} options.bandwidth\n * @param {number} options.fps\n * @param {string} options.desktopStream\n * @param {string} options.cameraDeviceId\n * @param {string} options.micDeviceId\n * @param {CameraFacingMode} options.facingMode\n * @param {bool} firefox_fake_device\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @param {bool}   options.screenShareAudio - Used by electron clients to\n * enable system audio screen sharing.\n */\nfunction getConstraints(um, options = {}) {\n    const constraints = {\n        audio: false,\n        video: false\n    };\n\n    // Don't mix new and old style settings for Chromium as this leads\n    // to TypeError in new Chromium versions. @see\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\n    // This is a temporary solution, in future we will fully split old and\n    // new style constraints when new versions of Chromium and Firefox will\n    // have stable support of new constraints format. For more information\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\n    const isNewStyleConstraintsSupported\n        = browser.isFirefox()\n            || browser.isSafari()\n            || browser.isReactNative();\n\n    if (um.indexOf('video') >= 0) {\n        // same behaviour as true\n        constraints.video = { mandatory: {},\n            optional: [] };\n\n        if (options.cameraDeviceId) {\n            if (isNewStyleConstraintsSupported) {\n                // New style of setting device id.\n                constraints.video.deviceId = options.cameraDeviceId;\n            }\n\n            // Old style.\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\n        } else {\n            // Prefer the front i.e. user-facing camera (to the back i.e.\n            // environment-facing camera, for example).\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\n            // but this probably needs to be decided when updating other\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            if (isNewStyleConstraintsSupported) {\n                constraints.video.facingMode = facingMode;\n            }\n            constraints.video.optional.push({\n                facingMode\n            });\n        }\n\n        if (options.minFps || options.maxFps || options.fps) {\n            // for some cameras it might be necessary to request 30fps\n            // so they choose 30fps mjpg over 10fps yuy2\n            if (options.minFps || options.fps) {\n                // Fall back to options.fps for backwards compatibility\n                options.minFps = options.minFps || options.fps;\n                constraints.video.mandatory.minFrameRate = options.minFps;\n            }\n            if (options.maxFps) {\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\n            }\n        }\n\n        setResolutionConstraints(\n            constraints, isNewStyleConstraintsSupported, options.resolution);\n    }\n    if (um.indexOf('audio') >= 0) {\n        if (browser.isReactNative()) {\n            // The react-native-webrtc project that we're currently using\n            // expects the audio constraint to be a boolean.\n            constraints.audio = true;\n        } else if (browser.isFirefox()) {\n            if (options.micDeviceId) {\n                constraints.audio = {\n                    mandatory: {},\n                    deviceId: options.micDeviceId, // new style\n                    optional: [ {\n                        sourceId: options.micDeviceId // old style\n                    } ] };\n            } else {\n                constraints.audio = true;\n            }\n        } else {\n            // same behaviour as true\n            constraints.audio = { mandatory: {},\n                optional: [] };\n            if (options.micDeviceId) {\n                if (isNewStyleConstraintsSupported) {\n                    // New style of setting device id.\n                    constraints.audio.deviceId = options.micDeviceId;\n                }\n\n                // Old style.\n                constraints.audio.optional.push({\n                    sourceId: options.micDeviceId\n                });\n            }\n\n            // if it is good enough for hangouts...\n            constraints.audio.optional.push(\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    }\n    if (um.indexOf('screen') >= 0) {\n        if (browser.isChrome()) {\n            constraints.video = {\n                mandatory: getSSConstraints({\n                    ...options,\n                    source: 'screen'\n                }),\n                optional: []\n            };\n\n        } else if (browser.isFirefox()) {\n            constraints.video = {\n                mozMediaSource: 'window',\n                mediaSource: 'window',\n                frameRate: options.frameRate || {\n                    min: SS_DEFAULT_FRAME_RATE,\n                    max: SS_DEFAULT_FRAME_RATE\n                }\n            };\n\n        } else {\n            const errmsg\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\n                    + ' and Firefox';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n        }\n    }\n    if (um.indexOf('desktop') >= 0) {\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            }),\n            optional: []\n        };\n\n        // Audio screen sharing for electron only works for screen type devices.\n        // i.e. when the user shares the whole desktop.\n        if (browser.isElectron() && options.screenShareAudio\n            && (options.desktopStream.indexOf('screen') >= 0)) {\n\n            // Provide constraints as described by the electron desktop capturer\n            // documentation here:\n            // https://www.electronjs.org/docs/api/desktop-capturer\n            constraints.audio = { mandatory: {\n                chromeMediaSource: constraints.video.mandatory.chromeMediaSource\n            } };\n\n            delete constraints.video.mandatory.chromeMediaSourceId;\n        }\n    }\n\n    if (options.bandwidth) {\n        if (!constraints.video) {\n            // same behaviour as true\n            constraints.video = { mandatory: {},\n                optional: [] };\n        }\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\n    }\n\n    // we turn audio for both audio and video tracks, the fake audio & video\n    // seems to work only when enabled in one getUserMedia call, we cannot get\n    // fake audio separate by fake video this later can be a problem with some\n    // of the tests\n    if (browser.isFirefox() && options.firefox_fake_device) {\n        // seems to be fixed now, removing this experimental fix, as having\n        // multiple audio tracks brake the tests\n        // constraints.audio = true;\n        constraints.fake = true;\n    }\n\n    return constraints;\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted\n * types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video\n * capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use\n * as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which\n * to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is\n * pointing to.\n * @param {string} options.micDeviceId - The device id for the audio capture\n * device to get audio from.\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @private\n * @returns {Object}\n */\nfunction newGetConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = JSON.parse(JSON.stringify(\n        options.constraints || DEFAULT_CONSTRAINTS));\n\n    if (um.indexOf('video') >= 0) {\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        // Use the standard audio constraints on non-chromium browsers.\n        if (browser.isFirefox() || browser.isSafari()) {\n            constraints.audio = {\n                deviceId: options.micDeviceId,\n                autoGainControl: !disableAGC && !disableAP,\n                echoCancellation: !disableAEC && !disableAP,\n                noiseSuppression: !disableNS && !disableAP\n            };\n        } else {\n            // NOTE(brian): the new-style ('advanced' instead of 'optional')\n            // doesn't seem to carry through the googXXX constraints\n            // Changing back to 'optional' here (even with video using\n            // the 'advanced' style) allows them to be passed through\n            // but also requires the device id to capture to be set in optional\n            // as sourceId otherwise the constraints are considered malformed.\n            if (!constraints.audio.optional) {\n                constraints.audio.optional = [];\n            }\n            constraints.audio.optional.push(\n                { sourceId: options.micDeviceId },\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    if (um.indexOf('desktop') >= 0) {\n        if (!constraints.video || typeof constraints.video === 'boolean') {\n            constraints.video = {};\n        }\n\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            })\n        };\n    }\n\n    return constraints;\n}\n\n/**\n * Generates GUM constraints for screen sharing.\n *\n * @param {Object} options - The options passed to\n * <tt>obtainAudioAndVideoPermissions</tt>.\n * @returns {Object} - GUM constraints.\n *\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\n * should make it work for all use cases.\n */\nfunction getSSConstraints(options = {}) {\n    const {\n        desktopStream,\n        frameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: SS_DEFAULT_FRAME_RATE\n        }\n    } = options;\n    const { max, min } = frameRate;\n\n    const constraints = {\n        chromeMediaSource: options.source,\n        maxWidth: window.screen.width,\n        maxHeight: window.screen.height\n    };\n\n    if (typeof min === 'number') {\n        constraints.minFrameRate = min;\n    }\n\n    if (typeof max === 'number') {\n        constraints.maxFrameRate = max;\n    }\n\n    if (typeof desktopStream !== 'undefined') {\n        constraints.chromeMediaSourceId = desktopStream;\n    }\n\n    return constraints;\n}\n\n/**\n * Generates constraints for screen sharing when using getDisplayMedia.\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\n *\n * @returns {Object} - MediaTrackConstraints constraints.\n */\nfunction getTrackSSConstraints(options = {}) {\n    // we used to set height and width in the constraints, but this can lead\n    // to inconsistencies if the browser is on a lower resolution screen\n    // and we share a screen with bigger resolution, so they are now not set\n    const constraints = {\n        frameRate: SS_DEFAULT_FRAME_RATE\n    };\n    const { desktopSharingFrameRate } = options;\n\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\n        constraints.frameRate = desktopSharingFrameRate.max;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info(\n        'list of media devices has changed:',\n        availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\n}\n\n/**\n * Handles the newly created Media Streams.\n * @param streams the new Media Streams\n * @param resolution the resolution of the video streams\n * @returns {*[]} object that describes the new streams\n */\nfunction handleLocalStream(streams, resolution) {\n    let audioStream, desktopStream, videoStream;\n    const res = [];\n\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\n    // the browser, its capabilities, etc. and has taken the decision whether to\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\n    // the specified streams and figure out what we've received based on\n    // obtainAudioAndVideoPermissions' decision.\n    if (streams) {\n        // As mentioned above, certian types of browser (e.g. Chrome) support\n        // (with a result which meets our requirements expressed bellow) calling\n        // getUserMedia once for both audio and video.\n        const audioVideo = streams.audioVideo;\n\n        if (audioVideo) {\n            const audioTracks = audioVideo.getAudioTracks();\n\n            if (audioTracks.length) {\n                audioStream = new MediaStream();\n                for (let i = 0; i < audioTracks.length; i++) {\n                    audioStream.addTrack(audioTracks[i]);\n                }\n            }\n\n            const videoTracks = audioVideo.getVideoTracks();\n\n            if (videoTracks.length) {\n                videoStream = new MediaStream();\n                for (let j = 0; j < videoTracks.length; j++) {\n                    videoStream.addTrack(videoTracks[j]);\n                }\n            }\n        } else {\n            // On other types of browser (e.g. Firefox) we choose (namely,\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\n            // (type).\n            audioStream = streams.audio;\n            videoStream = streams.video;\n        }\n\n        desktopStream = streams.desktop;\n    }\n\n    if (desktopStream) {\n        const { stream, sourceId, sourceType } = desktopStream;\n\n        res.push({\n            stream,\n            sourceId,\n            sourceType,\n            track: stream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.DESKTOP\n        });\n    }\n    if (audioStream) {\n        res.push({\n            stream: audioStream,\n            track: audioStream.getAudioTracks()[0],\n            mediaType: MediaType.AUDIO,\n            videoType: null\n        });\n    }\n    if (videoStream) {\n        res.push({\n            stream: videoStream,\n            track: videoStream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.CAMERA,\n            resolution\n        });\n    }\n\n    return res;\n}\n\n/**\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\n * source of a video element that tries to be browser-agnostic through feature\n * checking. Note though that it was not completely clear from the predating\n * browser-specific implementations what &quot;videoSrc&quot; was because one\n * implementation of {@link RTCUtils#getVideoSrc} would return\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\n * appear to be used anywhere. Generally, the implementation will try to follow\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\n * properties of the specified <tt>element</tt> taking into account vender\n * prefixes.\n *\n * @param element the element whose video source/src is to be set to the\n * specified <tt>stream</tt>\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\n * source/src of <tt>element</tt>\n */\nfunction defaultSetVideoSrc(element, stream) {\n    // srcObject\n    let srcObjectPropertyName = 'srcObject';\n\n    if (!(srcObjectPropertyName in element)) {\n        srcObjectPropertyName = 'mozSrcObject';\n        if (!(srcObjectPropertyName in element)) {\n            srcObjectPropertyName = null;\n        }\n    }\n    if (srcObjectPropertyName) {\n        element[srcObjectPropertyName] = stream;\n\n        return;\n    }\n\n    // src\n    let src;\n\n    if (stream) {\n        src = stream.jitsiObjectURL;\n\n        // Save the created URL for stream so we can reuse it and not keep\n        // creating URLs.\n        if (!src) {\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\n        }\n    }\n    element.src = src || '';\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.disableHPF === 'boolean') {\n            disableHPF = options.disableHPF;\n            logger.info(`Disable HPF: ${disableHPF}`);\n        }\n\n        availableDevices = undefined;\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\n\n        if (browser.usesNewGumFlow()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        } else if (browser.isChromiumBased() // this is chrome < 61\n                || browser.isReactNative()) {\n\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    defaultSetVideoSrc(element, stream);\n\n                    return element;\n                });\n\n            this.getStreamID = function({ id }) {\n                // A. MediaStreams from FF endpoints have the characters '{' and\n                // '}' that make jQuery choke.\n                // B. The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n\n            if (!MediaStream.prototype.getVideoTracks) {\n                MediaStream.prototype.getVideoTracks = function() {\n                    return this.videoTracks;\n                };\n            }\n            if (!MediaStream.prototype.getAudioTracks) {\n                MediaStream.prototype.getAudioTracks = function() {\n                    return this.audioTracks;\n                };\n            }\n        } else {\n            const message = 'Endpoint does not appear to be WebRTC-capable';\n\n            logger.error(message);\n            throw new Error(message);\n        }\n\n        this._initPCConstraints();\n\n        screenObtainer.init(\n            options,\n            this.getUserMediaWithConstraints.bind(this));\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.splice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n\n                // Use a shared callback to handle both the devicechange event\n                // and the polling implementations. This prevents duplication\n                // and works around a chrome bug (verified to occur on 68) where\n                // devicechange fires twice in a row, which can cause async post\n                // devicechange processing to collide.\n                const updateKnownDevices = () => this.enumerateDevices(pds => {\n                    if (compareAvailableMediaDevices(pds)) {\n                        onMediaDevicesListChanged(pds);\n                    }\n                });\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        updateKnownDevices);\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        updateKnownDevices,\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     * Creates instance objects for peer connection constraints both for p2p\n     * and outside of p2p.\n     */\n    _initPCConstraints() {\n        if (browser.isFirefox()) {\n            this.pcConstraints = {};\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\n            this.pcConstraints = { optional: [\n                { googHighStartBitrate: 0 },\n                { googPayloadPadding: true },\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true },\n                { googCpuOveruseEncodeUsage: true },\n                { googCpuUnderuseThreshold: 55 },\n                { googCpuOveruseThreshold: 85 }\n            ] };\n\n            this.p2pPcConstraints\n                = JSON.parse(JSON.stringify(this.pcConstraints));\n        }\n\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n    * @param {string[]} um required user media types\n    * @param {Object} [options] optional parameters\n    * @param {string} options.resolution\n    * @param {number} options.bandwidth\n    * @param {number} options.fps\n    * @param {string} options.desktopStream\n    * @param {string} options.cameraDeviceId\n    * @param {string} options.micDeviceId\n    * @param {Object} options.frameRate - used only for dekstop sharing.\n    * @param {Object} options.frameRate.min - Minimum fps\n    * @param {Object} options.frameRate.max - Maximum fps\n    * @param {bool}   options.screenShareAudio - Used by electron clients to\n    * enable system audio screen sharing.\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\n    * on failure.\n    **/\n    getUserMediaWithConstraints(um, options = {}) {\n        const constraints = getConstraints(um, options);\n\n        logger.info('Get media constraints', constraints);\n\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n            .then(stream => {\n                logger.log('onUserMediaSuccess');\n                updateGrantedPermissions(um, stream);\n                resolve(stream);\n            })\n            .catch(error => {\n                logger.warn('Failed to get access to local media. '\n                    + ` ${error} ${constraints} `);\n                updateGrantedPermissions(um, undefined);\n                reject(new JitsiTrackError(error, constraints, um));\n            });\n        });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @returns {Promise}\n     */\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(umDevices, undefined);\n                    reject(new JitsiTrackError(error, constraints, umDevices));\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_newGetUserMediaWithConstraints.\n     *\n     * @param {Object} options\n     * @param {string[]} options.desktopSharingSources\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _newGetDesktopMedia(options) {\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                this._parseDesktopSharingOptions(options),\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {Object} [options] optional parameters\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    obtainAudioAndVideoPermissions(options = {}) {\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\n\n        const requestingDesktop = options.devices.includes('desktop');\n\n        if (requestingDesktop && !screenObtainer.isSupported()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return this._getAudioAndVideoStreams(options).then(streams =>\n            handleLocalStream(streams, options.resolution));\n    }\n\n    /**\n     * Performs one call to getUserMedia for audio and/or video and another call\n     * for desktop.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreams(options) {\n        const requestingDesktop = options.devices.includes('desktop');\n\n        options.devices = options.devices.filter(device =>\n            device !== 'desktop');\n\n        const gumPromise = options.devices.length\n            ? this.getUserMediaWithConstraints(options.devices, options)\n            : Promise.resolve(null);\n\n        return gumPromise\n            .then(avStream => {\n                // If any requested devices are missing, call gum again in\n                // an attempt to obtain the actual error. For example, the\n                // requested video device is missing or permission was\n                // denied.\n                const missingTracks\n                    = this._getMissingTracks(options.devices, avStream);\n\n                if (missingTracks.length) {\n                    this.stopMediaStream(avStream);\n\n                    return this.getUserMediaWithConstraints(\n                        missingTracks, options)\n\n                        // GUM has already failed earlier and this success\n                        // handling should not be reached.\n                        .then(() => Promise.reject(new JitsiTrackError(\n                            { name: 'UnknownError' },\n                            getConstraints(options.devices, options),\n                            missingTracks)));\n                }\n\n                return avStream;\n            })\n            .then(audioVideo => {\n                if (!requestingDesktop) {\n                    return { audioVideo };\n                }\n\n                if (options.desktopSharingSourceDevice) {\n                    this.stopMediaStream(audioVideo);\n\n                    throw new Error('Using a camera as screenshare source is'\n                        + 'not supported on this browser.');\n                }\n\n                return new Promise((resolve, reject) => {\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options),\n                        desktop => resolve({\n                            audioVideo,\n                            desktop\n                        }),\n                        error => {\n                            if (audioVideo) {\n                                this.stopMediaStream(audioVideo);\n                            }\n                            reject(error);\n                        });\n                });\n            });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Returns an object formatted for specifying desktop sharing parameters.\n     *\n     * @param {Object} options - Takes in the same options object as\n     * {@link obtainAudioAndVideoPermissions}.\n     * @returns {Object}\n     */\n    _parseDesktopSharingOptions(options) {\n        return {\n            desktopSharingSources: options.desktopSharingSources,\n            gumOptions: {\n                frameRate: options.desktopSharingFrameRate\n            },\n            trackOptions: getTrackSSConstraints(options)\n        };\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    newObtainAudioAndVideoPermissions(options) {\n        logger.info('Using the new gUM flow');\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = options.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            } = options;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\n                // get constraints for the desktop stream.\n                const { gumOptions, trackOptions }\n                    = this._parseDesktopSharingOptions(options);\n\n                const constraints = {\n                    video: {\n                        ...gumOptions,\n                        deviceId: matchingDevice.deviceId\n                    }\n                };\n\n                return this._newGetUserMediaWithConstraints(\n                    requestedDevices, constraints)\n                    .then(stream => {\n                        const track = stream && stream.getTracks()[0];\n                        const applyConstrainsPromise\n                            = track && track.applyConstraints\n                                ? track.applyConstraints(trackOptions)\n                                : Promise.resolve();\n\n                        return applyConstrainsPromise\n                            .then(() => {\n                                return {\n                                    sourceType: 'device',\n                                    stream\n                                };\n                            });\n                    });\n            }\n\n            return this._newGetDesktopMedia({\n                desktopSharingSources,\n                desktopSharingFrameRate\n            });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = options.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device =>\n                device === 'audio'\n                || (device === 'video' && browser.supportsVideo()));\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = newGetConstraints(\n                requestedCaptureDevices, options);\n\n            logger.info('Got media constraints: ', constraints);\n\n            return this._newGetUserMediaWithConstraints(\n                requestedCaptureDevices, constraints);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: options.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: options.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n\n        // if we have done createObjectURL, lets clean it\n        const url = mediaStream.jitsiObjectURL;\n\n        if (url) {\n            delete mediaStream.jitsiObjectURL;\n            URL.revokeObjectURL(url);\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport BridgeChannel from './BridgeChannel';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RTCUtils from './RTCUtils';\nimport Statistics from '../statistics/statistics';\nimport TraceablePeerConnection from './TraceablePeerConnection';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n *\n * @param tracksInfo\n * @param options\n */\nfunction createLocalTracks(tracksInfo, options) {\n    const newTracks = [];\n    let deviceId = null;\n\n    tracksInfo.forEach(trackInfo => {\n        if (trackInfo.mediaType === MediaType.AUDIO) {\n            deviceId = options.micDeviceId;\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\n            deviceId = options.cameraDeviceId;\n        }\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n        const localTrack = new JitsiLocalTrack({\n            ...trackInfo,\n            deviceId,\n            facingMode: options.facingMode,\n            rtcId: rtcTrackIdCounter,\n            effects: options.effects\n        });\n\n        newTracks.push(localTrack);\n    });\n\n    return newTracks;\n}\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        // A flag whether we had received that the channel had opened we can\n        // get this flag out of sync if for some reason channel got closed\n        // from server, a desired behaviour so we can see errors when this\n        // happen.\n        // @private\n        // @type {boolean}\n        this._channelOpen = false;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = -1;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\n         * no user is pinned.\n         * @type {string|null}\n         * @private\n         */\n        this._pinnedEndpoint = null;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = [];\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n            this._updateAudioOutputForAudioTracks\n        );\n\n        RTCUtils.removeListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            this._onDeviceListChanged\n        );\n\n        this.removeListener(\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener\n        );\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static newCreateLocalTracks(tracksInfo) {\n        return _newCreateLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        const usesNewGumFlow = browser.usesNewGumFlow();\n        const obtainMediaPromise = usesNewGumFlow\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\n\n        return obtainMediaPromise.then(tracksInfo => {\n            if (usesNewGumFlow) {\n                return _newCreateLocalTracks(tracksInfo);\n            }\n\n            return createLocalTracks(tracksInfo, options);\n        });\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(\n            peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            // Mark that channel as opened.\n            this._channelOpen = true;\n\n            // When the channel becomes available, tell the bridge about\n            // video selections so that it can do adaptive simulcast,\n            // we want the notification to trigger even if userJid\n            // is undefined, or null.\n            try {\n                this._channel.sendPinnedEndpointMessage(\n                    this._pinnedEndpoint);\n                this._channel.sendSelectedEndpointsMessage(\n                    this._selectedEndpoints);\n\n                if (typeof this._maxFrameHeight !== 'undefined') {\n                    this._channel.sendReceiverVideoConstraintMessage(\n                        this._maxFrameHeight);\n                }\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    `Cannot send selected(${this._selectedEndpoint})`\n                    + `pinned(${this._pinnedEndpoint})`\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\n                    error);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener);\n            this._channelOpenListener = null;\n\n            // If setLastN was invoked before the bridge channel completed\n            // opening, apply the specified value now that the channel\n            // is open. NOTE that -1 is the default value assumed by both\n            // RTC module and the JVB.\n            if (this._lastN !== -1) {\n                this._channel.sendSetLastNMessage(this._lastN);\n            }\n        };\n\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\n            this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n            this._channelOpen = false;\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     * Elects the participant with the given id to be the pinned participant in\n     * order to always receive video for this participant (even when last n is\n     * enabled).\n     * @param {stirng} id The user id.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     */\n    pinEndpoint(id) {\n        // Cache the value if channel is missing, till we open it.\n        this._pinnedEndpoint = id;\n        if (this._channel && this._channelOpen) {\n            this._channel.sendPinnedEndpointMessage(id);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = RTC.getPCConstraints(isP2P);\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n\n        if (browser.supportsInsertableStreams()) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            iceConfig.forceEncodedAudioInsertableStreams = true;\n            iceConfig.forceEncodedVideoInsertableStreams = true;\n        }\n\n        if (browser.supportsSdpSemantics()) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        iceConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Returns the current value for \"lastN\" - the amount of videos are going\n     * to be delivered. When set to -1 for unlimited or all available videos.\n     * @return {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\n     * (resource part of the JID). Returns array of removed tracks.\n     *\n     * @param {string} Owner The resource part of the MUC JID.\n     * @returns {JitsiRemoteTrack[]}\n     */\n    removeRemoteTracks(owner) {\n        let removedTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\n\n            removedTracks = removedTracks.concat(pcRemovedTracks);\n        }\n\n        logger.debug(\n            `Removed remote tracks for ${owner}`\n                + ` count: ${removedTracks.length}`);\n\n        return removedTracks;\n    }\n\n    /**\n     *\n     */\n    static getPCConstraints(isP2P) {\n        const pcConstraints\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\n\n        if (!pcConstraints) {\n            return {};\n        }\n\n        return JSON.parse(JSON.stringify(pcConstraints));\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channelOpen = false;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channelOpen) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","/**\n * Dummy implementation of Storage interface with empty methods.\n */\nclass DummyLocalStorage {\n    /* eslint-disable no-empty-function */\n    /**\n     * Empty function\n     */\n    getItem() { }\n\n    /**\n     * Empty function\n     */\n    setItem() { }\n\n    /**\n     * Empty function\n     */\n    removeItem() { }\n\n    /**\n     * Empty function\n     */\n    key() { }\n    /* eslint-enable no-empty-function */\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends DummyLocalStorage {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n        let storage;\n\n        try {\n            storage = window.localStorage;\n        } catch (error) {\n            // do nothing\n        }\n        this.storage = storage || new DummyLocalStorage();\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this.storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName the name of the key you want to create/update.\n     * @param {string} keyValue the value you want to give the key you are\n     * creating/updating.\n     */\n    setItem(keyName, keyValue) {\n        return this.storage.setItem(keyName, keyValue);\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        return this.storage.removeItem(keyName);\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this.storage.key(i);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/* global $ */\n\nimport browser from '../browser';\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case 'sendonly':\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case 'recvonly':\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case 'sendrecv':\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case 'inactive':\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        media.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            sdp += ` ${streamCount}\\r\\n`;\n        } else {\n            sdp += '\\r\\n';\n        }\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += 'a=sendonly\\r\\n';\n        break;\n    case 'responder':\n        sdp += 'a=recvonly\\r\\n';\n        break;\n    case 'none':\n        sdp += 'a=inactive\\r\\n';\n        break;\n    case 'both':\n        sdp += 'a=sendrecv\\r\\n';\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sdp += `a=ssrc:${ssrc} ${name}`;\n                    if (value && value.length) {\n                        sdp += `:${value}`;\n                    }\n                    sdp += '\\r\\n';\n                });\n        });\n\n    return sdp;\n};\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","\n\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","const Resolutions = {\n    '1080': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    '720': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    'hd': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    '960': {\n        width: 960,\n        height: 720,\n        order: 6\n    },\n    '540': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n    'qhd': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n\n    // 16:9 resolution first.\n    '360': {\n        width: 640,\n        height: 360,\n        order: 4\n    },\n    '640': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n    'vga': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n\n    // 16:9 resolution first.\n    '180': {\n        width: 320,\n        height: 180,\n        order: 2\n    },\n    '320': {\n        width: 320,\n        height: 240,\n        order: 1\n    }\n};\n\nmodule.exports = Resolutions;\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection the the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","import { getLogger } from 'jitsi-meet-logger';\nimport { jitsiLocalStorage } from 'js-utils';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = jitsiLocalStorage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                jitsiLocalStorage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            _machineId = jitsiLocalStorage.getItem('jitsiMeetId');\n            if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                jitsiLocalStorage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return jitsiLocalStorage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            jitsiLocalStorage.setItem('sessionId', sessionId);\n        } else {\n            jitsiLocalStorage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport RandomUtil from '../util/RandomUtil';\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport browser from '../browser';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheUtil from './strophe.util';\nimport PingConnectionPlugin from './strophe.ping';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheLogger from './strophe.logger';\nimport Listenable from '../util/Listenable';\nimport Caps from './Caps';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({ enableWebsocketResume, serviceUrl = '/http-bind', token, websocketKeepAlive }) {\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n    { urls: 'stun:stun2.l.google.com:19302' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        if (!this.options.disableRtx) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChrome() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (browser.supportsInsertableStreams()) {\n            this.caps.addFeature('https://jitsi.org/meet/e2ee');\n        }\n    }\n\n    /**\n     * Returns {@code true} if the PING functionality is supported by the server\n     * or {@code false} otherwise.\n     * @returns {boolean}\n     */\n    isPingSupported() {\n        return this._pingSupported !== false;\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED\n            || status === Strophe.Status.ATTACHED) {\n            if (this.options.useStunTurn\n                || (this.options.p2p && this.options.p2p.useStunTurn)) {\n                this.connection.jingle.getStunAndTurnCredentials();\n            }\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // Schedule ping ?\n            const pingJid = this.connection.domain;\n\n            // FIXME no need to do it again on stream resume\n            this.caps.getFeaturesAndIdentities(pingJid)\n                .then(({ features, identities }) => {\n                    if (features.has(Strophe.NS.PING)) {\n                        this._pingSupported = true;\n                        this.connection.ping.startInterval(pingJid);\n                    } else {\n                        logger.warn(`Ping NOT supported by ${pingJid}`);\n                    }\n\n                    // check for speakerstats\n                    identities.forEach(identity => {\n                        if (identity.type === 'speakerstats') {\n                            this.speakerStatsComponentAddress = identity.name;\n                        }\n\n                        if (identity.type === 'conference_duration') {\n                            this.conferenceDurationComponentAddress = identity.name;\n                        }\n\n                        if (identity.type === 'lobbyrooms') {\n                            this.lobbySupported = true;\n                        }\n                    });\n\n                    if (this.speakerStatsComponentAddress\n                        || this.conferenceDurationComponentAddress) {\n                        this.connection.addHandler(\n                            this._onPrivateMessage.bind(this), null,\n                            'message', null, null);\n                    }\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg,\n                credentials);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${roomName}@${options.customDomain\n            ? options.customDomain : this.options.hosts.muc.toLowerCase()}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server. Remember to check {@link isPingSupported} before using\n     * this method.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            if (this.isPingSupported()) {\n                this.connection.ping\n                    .ping(this.connection.domain, resolve, reject, timeout);\n            } else {\n                reject('PING operation is not supported by the server');\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('ping', new PingConnectionPlugin(this));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\n            && parsedJson.users) {\n            this.eventEmitter.emit(\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        }\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration'\n            && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(\n                XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        }\n\n        return true;\n    }\n}\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\nimport { getJitterDelay } from '../util/Retry';\n\nimport LastSuccessTracker from './StropheLastSuccess';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=240000] - The websocket keep alive interval. It's 4 minutes by\n     * default with jitter. Pass -1 to disable. The actual interval equation is:\n     * jitterDelay = (interval * 0.2) + (0.8 * interval * Math.random())\n     * The keep alive is HTTP GET request to the {@link options.serviceUrl}.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, serviceUrl }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 4 * 60 * 1000 : Number(websocketKeepAlive)\n        };\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._lastSuccessTracker = new LastSuccessTracker();\n        this._lastSuccessTracker.startTracking(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        return this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED;\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        this._stropheConn._proto && this._stropheConn._proto.socket && this._stropheConn._proto.socket.close();\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        clearTimeout(this._resumeTimeout);\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccessTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter\n                = /* base */ (websocketKeepAlive * 0.2) + /* jitter */ (Math.random() * 0.8 * websocketKeepAlive);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(() => {\n                const url = this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n                fetch(url).catch(\n                    error => {\n                        logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n                    })\n                    .then(() => this._maybeStartWSKeepAlive());\n            }, intervalWithJitter);\n        }\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error));\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            clearTimeout(this._resumeTimeout);\n\n            // FIXME detect internet offline\n            // The retry delay will be:\n            //   1st retry: 1.5s - 3s\n            //   2nd retry: 3s - 9s\n            //   3rd retry: 3s - 27s\n            this._resumeRetryN = Math.min(3, this._resumeRetryN + 1);\n            const retryTimeout = getJitterDelay(this._resumeRetryN, 1500, 3);\n\n            logger.info(`Will try to resume the XMPP connection in ${retryTimeout}ms`);\n\n            this._resumeTimeout = setTimeout(() => {\n                logger.info('Trying to resume the XMPP connection');\n\n                const url = new URL(this._stropheConn.service);\n                let { search } = url;\n\n                search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n\n                url.search = search;\n\n                this._stropheConn.service = url.toString();\n\n                streamManagement.resume();\n            }, retryTimeout);\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nlet gumFunction = null;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     * @param {Function} gum GUM method\n     */\n    init(options = {}, gum) {\n        this.options = options;\n        gumFunction = gum;\n\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (_, onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param {Object} [options] - Screen sharing options.\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\n     * sources that have to be displayed in the desktop picker window ('screen',\n     * 'window', etc.).\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingSources, gumOptions } = options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources\n                },\n                (streamId, streamType, screenShareAudio = false) =>\n                    onGetStreamResponse(\n                        {\n                            response: {\n                                streamId,\n                                streamType,\n                                screenShareAudio\n                            },\n                            gumOptions\n                        },\n                        onSuccess,\n                        onFailure\n                    ),\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        getDisplayMedia({ video: true,\n            audio: true })\n            .then(stream => {\n                let applyConstraintsPromise;\n\n                if (stream\n                    && stream.getTracks()\n                    && stream.getTracks().length > 0) {\n                    const videoTrack = stream.getVideoTracks()[0];\n\n                    // Apply video track constraint.\n                    if (videoTrack) {\n                        applyConstraintsPromise = videoTrack.applyConstraints(options.trackOptions);\n                    }\n                } else {\n                    applyConstraintsPromise = Promise.resolve();\n                }\n\n                applyConstraintsPromise.then(() =>\n                    callback({\n                        stream,\n                        sourceId: stream.id\n                    }));\n            })\n            .catch(() =>\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED)));\n    }\n};\n\n/**\n * Handles response from external application / extension and calls GUM to\n * receive the desktop streams or reports error.\n * @param {object} options\n * @param {object} options.response\n * @param {string} options.response.streamId - the streamId for the desktop\n * stream.\n * @param {bool}   options.response.screenShareAudio - Used by electron clients to\n * enable system audio screen sharing.\n * @param {string} options.response.error - error to be reported.\n * @param {object} options.gumOptions - options passed to GUM.\n * @param {Function} onSuccess - callback for success.\n * @param {Function} onFailure - callback for failure.\n * @param {object} gumOptions - options passed to GUM.\n */\nfunction onGetStreamResponse(\n        options = {\n            response: {},\n            gumOptions: {}\n        },\n        onSuccess,\n        onFailure) {\n    const { streamId, streamType, screenShareAudio, error } = options.response || {};\n\n    if (streamId) {\n        const gumOptions = {\n            desktopStream: streamId,\n            screenShareAudio,\n            ...options.gumOptions\n        };\n\n        gumFunction([ 'desktop' ], gumOptions)\n            .then(stream => onSuccess({\n                stream,\n                sourceId: streamId,\n                sourceType: streamType\n            }), onFailure);\n    } else {\n        // As noted in Chrome Desktop Capture API:\n        // If user didn't select any source (i.e. canceled the prompt)\n        // then the callback is called with an empty streamId.\n        if (streamId === '') {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n\n            return;\n        }\n\n        onFailure(new JitsiTrackError(\n            JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR,\n            error));\n    }\n}\n\nexport default ScreenObtainer;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.rtc.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            logger.debug('Assuming connection active by JVB - no notification');\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","/* global __filename, $ */\n\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport SDP from './SDP';\nimport SDPDiffer from './SDPDiffer';\nimport SDPUtil from './SDPUtil';\nimport SignalingLayerImpl from './SignalingLayerImpl';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which\n     * identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to\n     * createOffer/Answer, as defined by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\n     * standard.\n     * @param {boolean} isP2P indicates whether this instance is\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\n     * if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\n\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264);\n            pcOptions.preferH264 = options.preferH264;\n            pcOptions.enableLayerSuspension = options.enableLayerSuspension;\n\n            // disable simulcast for screenshare and set the max bitrate to\n            // 500Kbps if the testing flag is present in config.js.\n            if (options.testing\n                && options.testing.capScreenshareBitrate\n                && typeof options.testing.capScreenshareBitrate === 'number') {\n                pcOptions.capScreenshareBitrate\n                    = Math.random()\n                    < options.testing.capScreenshareBitrate;\n\n                // add the capScreenshareBitrate to the permanent properties so\n                // that it's included with every event that we send to the\n                // analytics backend.\n                Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n            }\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\n                    + ` P2P? ${this.isP2P}:\\t`,\n                now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been\n                // restored.\n                if (this.peerconnection.signalingState === 'stable') {\n                    if (this.isReconnect) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                if (!this.wasConnected && this.wasstable) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            this.room.eventEmitter.emit(XMPPEvents.PEERCONNECTION_READY, this);\n            if (browser.usesUnifiedPlan() && state === 'stable'\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\n                logger.debug(`onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error('onnegotiationneeded error', error);\n                        } else {\n                            logger.debug('onnegotiationneeded executed - OK');\n                        }\n                    });\n            }\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n\n        if (!this.isP2P && options.enableLayerSuspension) {\n            // If this is the bridge session, we'll listen for\n            // IS_SELECTED_CHANGED events and notify the peer connection\n            this.rtc.addListener(RTCEvents.IS_SELECTED_CHANGED,\n                isSelected => {\n                    this.peerconnection.setIsSelected(isSelected);\n                    logger.info('Doing local O/A due to '\n                        + 'IS_SELECTED_CHANGED event');\n                    this.modificationQueue.push(finishedCallback => {\n                        this._renegotiate()\n                            .then(finishedCallback)\n                            .catch(finishedCallback);\n                    });\n                }\n            );\n        }\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        return this.isP2P\n            ? this.remoteRecvMaxFrameHeight\n            : undefined; // FIXME George: put a getter for the JVB's preference here\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice\n                = SDPUtil.iceparams(\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    // start 20ms callout\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, 20);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log('sendIceCandidate: last candidate.');\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log('sendIceCandidates', candidates);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn('Ignored add ICE candidate when in closed state');\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug('addIceCandidate ok!'),\n                        err => logger.error('addIceCandidate failed!', err));\n            }\n\n            finishedCallback();\n        };\n\n        logger.debug(\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(\n                                    `Invalid SSRC ${ssrc} value received`\n                                        + ` for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(\n                'Unable to generate recvonly SSRC - no peerconnection');\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            for (const localTrack of localTracks) {\n                this.peerconnection.addTrack(localTrack, true /* isInitiator */);\n            }\n            this.peerconnection.createOffer(this.mediaConstraints)\n                .then(offerSdp => {\n                    this.peerconnection.setLocalDescription(offerSdp)\n                        .then(() => {\n                            // NOTE that the offer is obtained from\n                            // the localDescription getter as it needs to go\n                            // though the transformation chain.\n                            this.sendSessionInitiate(\n                                this.peerconnection.localDescription.sdp);\n                            finishedCallback();\n                        }, error => {\n                            logger.error(\n                                'Failed to set local SDP', error, offerSdp);\n                            finishedCallback(error);\n                        });\n                }, error => {\n                    logger.error(\n                        'Failed to create an offer',\n                        error,\n                        this.mediaConstraints);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('invite error', error);\n                } else {\n                    logger.debug('invite executed - OK');\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info('Session-initiate: ', init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info('Got RESULT for \"session-initiate\"');\n            },\n            error => {\n                logger.error('\"session-initiate\" error', error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info('setAnswer - succeeded');\n            },\n            error => {\n                logger.error('setAnswer failed: ', error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks) {\n        const workFunction = finishedCallback => {\n\n            if (localTracks) {\n                for (const track of localTracks) {\n                    this.peerconnection.addTrack(track);\n                }\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n\n                    finishedCallback();\n                }, error => {\n                    logger.error(\n                        `Error renegotiating after setting new remote ${\n                            this.isInitiator ? 'answer: ' : 'offer: '}${error}`,\n                        newRemoteSdp);\n\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                error ? failure(error) : success();\n            });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\n            null);\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info('Sending session-accept', accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info('Sending transport-accept: ', transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info('Sending \\'transport-reject', transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success');\n\n            if (options && options.reasonDescription) {\n                sessionTerminate.up()\n                    .c('text')\n                    .t(options.reasonDescription);\n            }\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info('Sending session-terminate', sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`Skipped sending session-terminate for ${this}`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info('Sending SSRC update on reconnect');\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(\n                        `Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`Processing ${logPrefix}`);\n            logger.log(\n                'ICE connection state: ',\n                this.peerconnection.iceConnectionState);\n\n            const oldLocalSdp\n                = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = browser.usesPlanB()\n            ? new SDP(this.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (browser.usesPlanB()) {\n                lines.forEach(line => {\n                    remoteSdp.media[idx]\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            } else {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n\n                        // Change the direction to \"inactive\" only on Firefox. Audio fails on\n                        // Safari (possibly Chrome in unified plan mode) when we try to re-use inactive\n                        // m-lines due to a webkit bug.\n                        // https://bugs.webkit.org/show_bug.cgi?id=211181\n                        if (browser.isFirefox()) {\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace('a=sendonly', 'a=inactive');\n                        }\n                    }\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: setting remote description');\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug('Renegotiate: creating answer');\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug('Renegotiate: setting local description');\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: creating offer');\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug('Renegotiate: setting local description');\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(\n                            'Renegotiate: setting remote description');\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (browser.usesPlanB()) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        },\n                        finishedCallback /* will be called with en error */);\n                    }\n\n                    // Wait for the renegotation to be done if needed (plan-b) before adjusting\n                    // the max bitrates on the video sender.\n                    promise.then(() => {\n                        // configure max bitrate only when media is routed\n                        // through JVB. For p2p case, browser takes care of\n                        // adjusting the uplink based on the feedback it\n                        // gets from the peer.\n                        if (newTrack && !this.isP2P) {\n                            this.peerconnection.setMaxBitRate(newTrack);\n                        }\n                        finishedCallback();\n                    }, finishedCallback /* will be called with en error */);\n                })\n                .catch(err => {\n                    finishedCallback(err);\n                });\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error('Replace track error:', error);\n                        reject(error);\n                    } else {\n                        logger.info('Replace track done!');\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(\n                `${this} - some SSRC were added on ${operationName}`,\n                addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(\n                `${this} - some SSRCs were removed on ${operationName}`,\n                removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track);\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not\n                                // enough to fail the whole operation. It will log\n                                // an error inside.\n                                this._verifyNoSSRCChanged(\n                                    operationName, new SDP(oldLocalSDP));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n                this,\n                newMaxFrameHeight);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(\n            `${this} queued \"content-modify\" task`\n                + `(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('\"content-modify\" failed', error);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(\n                `${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn('Not sending SSRC update while the signaling is disconnected');\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info('Sending source-remove', remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        } else {\n            logger.log('removal not necessary');\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info('Sending source-add', add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        } else {\n            logger.log('addition not necessary');\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n        });\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[p2p=${this.isP2P},`\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            if (audioLevel !== this.audioLevel) {\n                this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n                this.callback(this.audioLevel);\n            }\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        if (this.audioLevel !== audioLevel) {\n            this.audioLevel = audioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel,\n                tpc);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\n\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\nexport const ERROR_FEATURE_VERSION_MISMATCH = 'Feature version mismatch';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.versionToCapabilities = Object.create(null);\n        this.jidToVersion = Object.create(null);\n        this.version = '';\n        this.rooms = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\n\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    addFeature(feature, submit = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    removeFeature(feature, submit = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Returns a set with the features for a participant.\n     * @param {String} jid the jid of the participant\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(jid, timeout = 5000) {\n        const user\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\n\n        if (!user || !(user.version in this.versionToCapabilities)) {\n            const node = user ? `${user.node}#${user.version}` : null;\n\n            return this._getDiscoInfo(jid, node, timeout)\n                .then(({ features, identities }) => {\n                    if (user) {\n                        const sha = generateSha(\n                            Array.from(identities),\n                            Array.from(features)\n                        );\n                        const receivedNode = `${user.node}#${sha}`;\n\n                        if (receivedNode === node) {\n                            this.versionToCapabilities[receivedNode] = features;\n\n                            return features;\n                        }\n\n                        // Check once if it has been cached asynchronously.\n                        if (this.versionToCapabilities[receivedNode]) {\n                            return this.versionToCapabilities[receivedNode];\n                        }\n\n                        logger.error(`Expected node ${node} but received ${\n                            receivedNode}`);\n\n                        return Promise.reject(ERROR_FEATURE_VERSION_MISMATCH);\n                    }\n                });\n        }\n\n        return Promise.resolve(this.versionToCapabilities[user.version]);\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, timeout = 5000) {\n        return this._getDiscoInfo(jid, null, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                const features = new Set();\n                const identities = new Set();\n\n                $(response)\n                    .find('>query>feature')\n                    .each(\n                        (_, el) => features.add(el.getAttribute('var')));\n                $(response)\n                    .find('>query>identity')\n                    .each(\n                        (_, el) => identities.add({\n                            type: el.getAttribute('type'),\n                            name: el.getAttribute('name'),\n                            category: el.getAttribute('category')\n                        }));\n                resolve({\n                    features,\n                    identities });\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n        this._fixChatRoomPresenceMap(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addToPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n\n    /**\n     * Parses the \"c\" xml node from presence.\n     * @param {DOMElement} stanza the presence packet\n     */\n    _handleCaps(stanza) {\n        const from = stanza.getAttribute('from');\n        const caps = stanza.querySelector('c');\n        const version = caps.getAttribute('ver');\n        const node = caps.getAttribute('node');\n        const oldVersion = this.jidToVersion[from];\n\n        this.jidToVersion[from] = { version,\n            node };\n        if (oldVersion && oldVersion.version !== version) {\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n                from);\n        }\n\n        // return true to not remove the handler from Strophe\n        return true;\n    }\n\n    /**\n     * Removes entry from this.jidToVersion map.\n     * @param {String} jid the jid to be removed.\n     */\n    _removeJidToVersionEntry(jid) {\n        if (jid in this.jidToVersion) {\n            delete this.jidToVersion[jid];\n        }\n    }\n}\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","import { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * @constructor\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n\n        /**\n         * The simulcast encodings that will be configured on the RTCRtpSender\n         * for the video tracks in the unified plan mode.\n         */\n        this.simulcastEncodings = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? 2500000 : 200000,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\n            },\n            {\n                active: true,\n                maxBitrate: 700000,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: 2.0\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? 200000 : 2500000,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\n            }\n        ];\n\n        /**\n         * Resolution height constraints for the simulcast encodings that\n         * are configured for the video tracks.\n         */\n        this.simulcastStreamConstraints = [];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    _ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === 'audio') {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            mLine.ssrcGroups[0].ssrcs.split(' ').forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.simulcastEncodings;\n        }\n\n        return [ { active: true } ];\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    _insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where\n        // we munge SDP for turning on simulcast. Remove this check\n        // when we move to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === 'video');\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than the\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === 'video' && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n     * Constructs resolution height constraints for the simulcast encodings that are\n     * created for a given local video track.\n     * @param {MediaStreamTrack} track - the local video track.\n     * @returns {void}\n     */\n    _setSimulcastStreamConstraints(track) {\n        if (browser.isReactNative()) {\n            return;\n        }\n\n        const height = track.getSettings().height;\n\n        for (const encoding in this.simulcastEncodings) {\n            if (this.simulcastEncodings.hasOwnProperty(encoding)) {\n                this.simulcastStreamConstraints.push({\n                    height: height / this.simulcastEncodings[encoding].scaleResolutionDownBy,\n                    rid: this.simulcastEncodings[encoding].rid\n                });\n            }\n        }\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @returns {boolean} Returns true if the operation is successful,\n    * false otherwise.\n    */\n    addTrack(localTrack, isInitiator = true) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: 'sendrecv',\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n\n        // Construct the simulcast stream constraints for the newly added track.\n        if (localTrack.isVideoTrack() && localTrack.videoType === VideoType.CAMERA && this.pc.isSimulcastOn()) {\n            this._setSimulcastStreamConstraints(localTrack.getTrack());\n        }\n    }\n\n    /**\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\n     * @returns {Promise<boolean>} - Promise that resolves to false if unmute\n     * operation is successful, a reject otherwise.\n     */\n    addTrackUnmute(localTrack) {\n        const mediaType = localTrack.getType();\n        const track = localTrack.getTrack();\n\n        // The assumption here is that the first transceiver of the specified\n        // media type is that of the local track.\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n        logger.debug(`Adding ${localTrack} on ${this.pc}`);\n\n        // If the client starts with audio/video muted setting, the transceiver direction\n        // will be set to 'recvonly'. Use addStream here so that a MSID is generated for the stream.\n        if (transceiver.direction === 'recvonly') {\n            const stream = localTrack.getOriginalStream();\n\n            if (stream) {\n                this.pc.peerconnection.addStream(localTrack.getOriginalStream());\n                this.setEncodings(localTrack);\n                this.pc.localTracks.set(localTrack.rtcId, localTrack);\n                transceiver.direction = 'sendrecv';\n            }\n\n            return Promise.resolve(false);\n        }\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => {\n                this.pc.localTracks.set(localTrack.rtcId, localTrack);\n\n                return Promise.resolve(false);\n            });\n    }\n\n    /**\n     * Removes the track from the RTCRtpSender as part of the mute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\n     * @returns {Promise<boolean>} - Promise that resolves to false if unmute\n     * operation is successful, a reject otherwise.\n     */\n    removeTrackMute(localTrack) {\n        const mediaType = localTrack.getType();\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.sender && t.sender.track && t.sender.track.id === localTrack.getTrackId());\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n\n        logger.debug(`Removing ${localTrack} on ${this.pc}`);\n\n        return transceiver.sender.replaceTrack(null)\n            .then(() => {\n                this.pc.localTracks.delete(localTrack.rtcId);\n\n                return Promise.resolve(false);\n            });\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<false>} Promise that resolves with false as we don't want\n     * renegotiation to be triggered automatically after this operation. Renegotiation is\n     * done when the browser fires the negotiationeeded event.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        if (oldTrack && newTrack) {\n            const mediaType = newTrack.getType();\n            const stream = newTrack.getOriginalStream();\n            const track = mediaType === MediaType.AUDIO\n                ? stream.getAudioTracks()[0]\n                : stream.getVideoTracks()[0];\n            const transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.receiver.track.kind === mediaType && !t.stopped);\n\n            if (!transceiver) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            logger.debug(`Replacing ${oldTrack} with ${newTrack} on ${this.pc}`);\n\n            return transceiver.sender.replaceTrack(track)\n                .then(() => {\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\n\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                    this.pc._addedStreams.push(stream);\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n                    this.pc.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n                        newTrack,\n                        this.pc._extractPrimarySSRC(ssrc));\n                });\n        } else if (oldTrack && !newTrack) {\n            if (!this.removeTrackMute(oldTrack)) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            this.pc.localTracks.delete(oldTrack.rtcId);\n            this.pc.localSSRCs.delete(oldTrack.rtcId);\n        } else if (newTrack && !oldTrack) {\n            const ssrc = this.pc.localSSRCs.get(newTrack.rtcId);\n\n            if (!this.addTrackUnmute(newTrack)) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            newTrack.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack);\n            this.pc.localTracks.set(newTrack.rtcId, newTrack);\n            this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n        }\n\n        return Promise.resolve(false);\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {false} - returns false always so that renegotiation is not automatically\n    * triggered after this operation.\n    */\n    setAudioTransferActive(active) {\n        return this.setMediaTransferActive('audio', active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     */\n    setEncodings(track) {\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.sender && t.sender.track && t.sender.track.kind === track.getType());\n        const parameters = transceiver.sender.getParameters();\n\n        parameters.encodings = this._getStreamEncodings(track);\n        transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {false} - returns false always so that renegotiation is not automatically\n     * triggered after this operation\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = Array.from(this.pc.localTracks.values())\n            .filter(track => track.getType() === mediaType);\n\n        if (active) {\n            transceivers.forEach(transceiver => {\n                if (localTracks.length) {\n                    transceiver.direction = 'sendrecv';\n                    const parameters = transceiver.sender.getParameters();\n\n                    if (parameters && parameters.encodings && parameters.encodings.length) {\n                        parameters.encodings.forEach(encoding => {\n                            encoding.active = true;\n                        });\n                        transceiver.sender.setParameters(parameters);\n                    }\n                } else {\n                    transceiver.direction = 'recvonly';\n                }\n            });\n        } else {\n            transceivers.forEach(transceiver => {\n                transceiver.direction = 'inactive';\n            });\n        }\n\n        return false;\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {false} - returns false always so that renegotiation is not automatically\n    * triggered after this operation.\n    */\n    setVideoTransferActive(active) {\n        return this.setMediaTransferActive('video', active);\n    }\n}\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport JitsiTrack from './JitsiTrack';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport browser from '../browser';\nimport RTCUtils from './RTCUtils';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        if (browser.usesNewGumFlow()) {\n            // Get the resolution from the track itself because it cannot be\n            // certain which resolution webrtc has fallen back to using.\n            this.resolution = track.getSettings().height;\n\n            // Cache the constraints of the track in case of any this track\n            // model needs to call getUserMedia again, such as when unmuting.\n            this._constraints = track.getConstraints();\n\n            // Safari returns an empty constraints object, construct the constraints using getSettings.\n            if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n                this._constraints = {\n                    height: track.getSettings().height,\n                    width: track.getSettings().width\n                };\n            }\n        } else {\n            // FIXME Currently, Firefox is ignoring our constraints about\n            // resolutions so we do not store it, to avoid wrong reporting of\n            // local track resolution.\n            this.resolution = browser.isFirefox() ? null : resolution;\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream.getTracks()[0];\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        if (browser.usesUnifiedPlan()) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return conference.replaceTrack(this, this)\n                .then(() => {\n                    this._setEffectInProgress = false;\n                })\n                .catch(error => {\n                    this._setEffectInProgress = false;\n                    this._switchStreamEffect();\n                    logger.error('Failed to switch to the new stream!', error);\n                    throw error;\n                });\n        }\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n            if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            if (browser.usesNewGumFlow()) {\n                promise\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\n                        {},\n                        streamOptions,\n                        { constraints: { video: this._constraints } }));\n            } else {\n                if (this.resolution) {\n                    streamOptions.resolution = this.resolution;\n                }\n\n                promise\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\n            }\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo\n                    = browser.usesNewGumFlow()\n                        ? streamsInfo.find(\n                            info => info.track.kind === mediaType)\n                        : streamsInfo.find(\n                            info => info.mediaType === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        this._switchStreamEffect();\n\n        let promise = Promise.resolve();\n\n        if (this.conference) {\n            promise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            let trackSettings;\n\n            try {\n                trackSettings = this.track.getSettings();\n            } catch (e) {\n                // XXX React-native-webrtc, for example, defines\n                // MediaStreamTrack#getSettings() but the implementation throws\n                // a \"Not implemented\" Error.\n            }\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.start();\n        this._isVADEmitterRunning = true;\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.stop();\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the creator's jid of the session.\n     * @param {JitsiParticipant} participant - The creator of the session.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the jid of the participant that stopped the session.\n     * @param {JitsiParticipant} participant  - The participant's jid,\n     * that stopped the session.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as MediaType from './service/RTC/MediaType';\nimport browser from './modules/browser';\nimport RTC from './modules/RTC/RTC';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport Statistics from './modules/statistics/statistics';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._grantedPermissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n        RTC.addListener(\n            RTCEvents.GRANTED_PERMISSIONS,\n            grantedPermissions =>\n                this._handleGrantedPermissions(grantedPermissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and\n        // 'microphone' permissions are implemented. (Testing for at least one\n        // of them seems sufficient).\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(() => resolve(true), () => resolve(false));\n        });\n    }\n\n    /**\n     * Updated the local granted permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} grantedPermissions - Array with the permissions\n     * which were granted.\n     */\n    _handleGrantedPermissions(grantedPermissions) {\n        this._grantedPermissions = {\n            ...this._grantedPermissions,\n            ...grantedPermissions\n        };\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._grantedPermissions) {\n                resolve(this._grantedPermissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    // Workaround on Safari for audio input device\n                    // selection to work. Safari doesn't support the\n                    // permissions query.\n                    if (browser.isSafari()) {\n                        resolve(true);\n\n                        return;\n                    }\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        // The status attribute is deprecated, and state\n                        // should be used instead, but check both for now\n                        // for backwards compatibility.\n                        const grantStatus = permissionStatus.state\n                            || permissionStatus.status;\n\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices && availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // Defer to the browser capabilities to allow exposure of the api to the\n        // consumer but prevent other files from having to import\n        // JitsiMediaDevices.\n        return browser.supportsVideo();\n    }\n}\n\nexport default new JitsiMediaDevices();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = createEmptyStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * Creates a empty MediaStream object which can be used\n * to add MediaStreamTracks to\n * @returns MediaStream\n */\nfunction createEmptyStream() {\n    if (typeof MediaStream !== 'undefined') {\n        return new MediaStream();\n    }\n    throw new Error('cannot create a clean mediaStream');\n}\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} eventEmitter EventEmitter instance.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError(\n                'At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError(\n                'Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        const jsonObject = {\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        };\n\n        this._send(jsonObject);\n        logger.log(`Channel lastN set to: ${value}`);\n    }\n\n    /**\n     * Sends a \"pinned endpoint changed\" message via the channel.\n     * @param {string} endpointId The id of the pinned endpoint.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendPinnedEndpointMessage(endpointId) {\n        logger.log(\n            'sending pinned changed notification to the bridge for endpoint ',\n            endpointId);\n\n        this._send({\n            colibriClass: 'PinnedEndpointChangedEvent',\n            pinnedEndpoint: endpointId || null\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(\n            'sending selected changed notification to the bridge for endpoints',\n            endpointIds);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log('sending a ReceiverVideoConstraint message with '\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to parse channel message as JSON: ',\n                    data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                // Endpoint ID from the Videobridge.\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\n\n                logger.info(\n                    'Channel new dominant speaker event: ',\n                    dominantSpeakerEndpoint);\n                emitter.emit(\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\n                    dominantSpeakerEndpoint);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(\n                    `Endpoint connection status changed: ${endpoint} active ? ${\n                        isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n                    endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\n                    obj.msgPayload);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs.\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info('Channel new last-n event: ',\n                    lastNEndpoints, obj);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                    lastNEndpoints, obj);\n\n                break;\n            }\n            case 'SelectedUpdateEvent': {\n                const isSelected = obj.isSelected;\n\n                logger.info(`SelectedUpdateEvent isSelected? ${isSelected}`);\n                emitter.emit(RTCEvents.IS_SELECTED_CHANGED, isSelected);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","import { getLogger } from 'jitsi-meet-logger';\nimport { BrowserDetection } from 'js-utils';\n\nconst logger = getLogger(__filename);\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isSafari();\n    }\n\n    /**\n     * Check whether or not the current browser support peer to peer connections\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\n     * otherwise.\n     */\n    supportsP2P() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return this.isChromiumBased()\n            || this.isFirefox()\n            || this.isReactNative()\n            || (this.isSafari() && !this.isVersionLessThan('12.1'));\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return (this.isFirefox() && this.isVersionLessThan('68')) || this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        return true;\n    }\n\n    /**\n     * Checks if the browser uses plan B.\n     *\n     * @returns {boolean}\n     */\n    usesPlanB() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\n    }\n\n    /**\n     * Checks if the browser uses unified plan.\n     *\n     * @returns {boolean}\n     */\n    usesUnifiedPlan() {\n        if (this.isFirefox()) {\n            return true;\n        }\n\n        if (this.isSafari() && typeof window.RTCRtpTransceiver !== 'undefined') {\n            // eslint-disable-next-line max-len\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n            // eslint-disable-next-line no-undef\n            return Object.keys(RTCRtpTransceiver.prototype)\n                   .indexOf('currentDirection') > -1;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether or not the current browser should be using the new\n     * getUserMedia flow, which utilizes the adapter shim. This method should\n     * be temporary and used while migrating all browsers to use adapter and\n     * the new getUserMedia.\n     *\n     * @returns {boolean}\n     */\n    usesNewGumFlow() {\n        const REQUIRED_CHROME_VERSION = 61;\n\n        if (this.isChrome()) {\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\n        }\n\n        if (this.isFirefox() || this.isSafari()) {\n            return true;\n        }\n\n        if (this.isChromiumBased()) {\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\n     * getUserMedia flow and Edge.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return this.usesNewGumFlow();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        return Boolean(typeof window.RTCRtpSender !== 'undefined'\n            && (window.RTCRtpSender.prototype.createEncodedStreams\n                || window.RTCRtpSender.prototype.createEncodedVideoStreams));\n    }\n\n    /**\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\n     * https://webrtc.org/web-apis/chrome/unified-plan/\n     *\n     * @returns {boolean}\n     */\n    supportsSdpSemantics() {\n        return this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import browser from '../browser';\nimport { browsers } from 'js-utils';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\n * reported by RTCPeerConnection#getStats mapped by browser.\n */\nconst KEYS_BY_BROWSER_TYPE = {};\n\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsLost': 'packetsLost',\n    'packetsSent': 'packetsSent',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'framerateMean': 'framerateMean',\n    'ip': 'address',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'googRemoteAddress',\n    'transportType': 'googTransportType',\n    'localAddress': 'googLocalAddress',\n    'activeConnection': 'googActiveConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googCodecName': 'googCodecName',\n    'googFrameHeightReceived': 'googFrameHeightReceived',\n    'googFrameWidthReceived': 'googFrameWidthReceived',\n    'googFrameHeightSent': 'googFrameHeightSent',\n    'googFrameWidthSent': 'googFrameWidthSent',\n    'googFrameRateReceived': 'googFrameRateReceived',\n    'googFrameRateSent': 'googFrameRateSent',\n    'audioInputLevel': 'audioInputLevel',\n    'audioOutputLevel': 'audioOutputLevel',\n    'currentRoundTripTime': 'googRtt',\n    'remoteCandidateType': 'googRemoteCandidateType',\n    'localCandidateType': 'googLocalCandidateType',\n    'ip': 'ip',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(\n        peerconnection,\n        audioLevelsInterval,\n        statsInterval,\n        eventEmitter) {\n    // StatsCollector depends entirely on the format of the reports returned by\n    // RTCPeerConnection#getStats. Given that the value of\n    // browser#getName() is very unlikely to change at runtime, it\n    // makes sense to discover whether StatsCollector supports the executing\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\n    // needlessly check a \"static\" condition multiple times very very often and\n    // (2) the lack of support for the executing browser would be discovered and\n    // reported multiple times very very often too late in the execution in some\n    // totally unrelated callback.\n    /**\n     * The browser type supported by this StatsCollector. In other words, the\n     * type of the browser which initialized this StatsCollector\n     * instance.\n     * @private\n     */\n    this._browserType = browser.getName();\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\n\n    if (!keys) {\n        // eslint-disable-next-line no-throw-literal\n        throw `The browser type '${this._browserType}' isn't supported!`;\n    }\n\n    /**\n     * Whether to use the Promise-based getStats API or not.\n     * @type {boolean}\n     */\n    this._usesPromiseGetStats\n        = browser.isSafari() || browser.isFirefox();\n\n    /**\n     * The function which is to be used to retrieve the value associated in a\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\n     * browser-agnostic name/key.\n     *\n     * @function\n     * @private\n     */\n    this._getStatValue\n        = this._usesPromiseGetStats\n            ? this._defineNewGetStatValueMethod(keys)\n            : this._defineGetStatValueMethod(keys);\n\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/* eslint-enable max-params */\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                this.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            results = report;\n                        } else {\n                            results = report.result();\n                        }\n                        this.currentAudioLevelsReport = results;\n                        if (this._usesPromiseGetStats) {\n                            this.processNewAudioLevelReport();\n                        } else {\n                            this.processAudioLevelReport();\n                        }\n\n                        this.baselineAudioLevelsReport\n                            = this.currentAudioLevelsReport;\n                    },\n                    error => this.errorCallback(error)\n                );\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    this.statsIntervalId = setInterval(\n        () => {\n            // Interval updates\n            this.peerconnection.getStats(\n                report => {\n                    let results = null;\n\n                    if (!report || !report.result\n                        || typeof report.result !== 'function') {\n                        // firefox\n                        results = report;\n                    } else {\n                        // chrome\n                        results = report.result();\n                    }\n\n                    this.currentStatsReport = results;\n                    try {\n                        if (this._usesPromiseGetStats) {\n                            this.processNewStatsReport();\n                        } else {\n                            this.processStatsReport();\n                        }\n                    } catch (e) {\n                        GlobalOnErrorHandler.callErrorHandler(e);\n                        logger.error(`Unsupported key:${e}`, e);\n                    }\n\n                    this.previousStatsReport = this.currentStatsReport;\n                },\n                error => this.errorCallback(error)\n            );\n        },\n        this.statsIntervalMilis\n    );\n};\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Define the function which retrieves the value from a specific report\n    // returned by RTCPeerConnection#getStats associated with a given\n    // browser-specific key.\n    let itemStatByKey;\n\n    switch (this._browserType) {\n    case browsers.CHROME:\n    case browsers.OPERA:\n    case browsers.NWJS:\n    case browsers.ELECTRON:\n        // TODO What about other types of browser which are based on Chrome such\n        // as NW.js? Every time we want to support a new type browser we have to\n        // go and add more conditions (here and in multiple other places).\n        // Cannot we do a feature detection instead of a browser type check? For\n        // example, if item has a stat property of type function, then it's very\n        // likely that whoever defined it wanted you to call it in order to\n        // retrieve the value associated with a specific key.\n        itemStatByKey = (item, key) => item.stat(key);\n        break;\n    case browsers.REACT_NATIVE:\n        // The implementation provided by react-native-webrtc follows the\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\n        // Array in which each element is a key-value pair.\n        itemStatByKey = function(item, key) {\n            let value;\n\n            item.values.some(pair => {\n                if (pair.hasOwnProperty(key)) {\n                    value = pair[key];\n\n                    return true;\n                }\n\n                return false;\n\n            });\n\n            return value;\n        };\n        break;\n    default:\n        itemStatByKey = (item, key) => item[key];\n    }\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => itemStatByKey(item, keyFromName(name));\n};\n\n/**\n * Obtains a stat value from given stat and converts it to a non-negative\n * number. If the value is either invalid or negative then 0 will be returned.\n * @param report\n * @param {string} name\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\n    let value = this._getStatValue(report, name);\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/* eslint-disable no-continue */\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    for (const idx in this.currentStatsReport) {\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n        const now = this.currentStatsReport[idx];\n\n        // The browser API may return \"undefined\" values in the array\n        if (!now) {\n            continue;\n        }\n\n        try {\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\n\n            if (receiveBandwidth || sendBandwidth) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(receiveBandwidth / 1000),\n                    'upload': Math.round(sendBandwidth / 1000)\n                };\n            }\n        } catch (e) { /* not supported*/ }\n\n        if (now.type === 'googCandidatePair') {\n            let active, ip, localCandidateType, localip,\n                remoteCandidateType, rtt, type;\n\n            try {\n                active = getStatValue(now, 'activeConnection');\n                if (!active) {\n                    continue;\n                }\n\n                ip = getStatValue(now, 'remoteAddress');\n                type = getStatValue(now, 'transportType');\n                localip = getStatValue(now, 'localAddress');\n                localCandidateType = getStatValue(now, 'localCandidateType');\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\n            } catch (e) { /* not supported*/ }\n            if (!ip || !type || !localip || active !== 'true') {\n                continue;\n            }\n\n            // Save the address unless it has been saved already.\n            const conferenceStatsTransport = this.conferenceStats.transport;\n\n            if (!conferenceStatsTransport.some(\n                    t =>\n                        t.ip === ip\n                            && t.type === type\n                            && t.localip === localip)) {\n                conferenceStatsTransport.push({\n                    ip,\n                    type,\n                    localip,\n                    p2p: this.peerconnection.isP2P,\n                    localCandidateType,\n                    remoteCandidateType,\n                    rtt\n                });\n            }\n            continue;\n        }\n\n        if (now.type === 'candidatepair') {\n            // we need succeeded and selected pairs only\n            if (now.state !== 'succeeded' || !now.selected) {\n                continue;\n            }\n\n            const local = this.currentStatsReport[now.localCandidateId];\n            const remote = this.currentStatsReport[now.remoteCandidateId];\n\n            this.conferenceStats.transport.push({\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\n                type: local.transport,\n                localip: `${local.ipAddress}:${local.portNumber}`,\n                p2p: this.peerconnection.isP2P,\n                localCandidateType: local.candidateType,\n                remoteCandidateType: remote.candidateType\n            });\n        }\n\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.previousStatsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        // If type=\"track\", take the first SSRC from ssrcIds.\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before || !ssrc) {\n            continue;\n        }\n\n        // isRemote is available only in FF and is ignored in case of chrome\n        // according to the spec\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\n        // when isRemote is true indicates that the measurements were done at\n        // the remote endpoint and reported in an RTCP RR/XR.\n        // Fixes a problem where we are calculating local stats wrong adding\n        // the sent bytes to the local download bitrate.\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\n        // property.\n        if (now.isRemote === true || now.remoteSource === true) {\n            continue;\n        }\n\n        let ssrcStats = this.ssrc2stats.get(ssrc);\n\n        if (!ssrcStats) {\n            ssrcStats = new SsrcStats();\n            this.ssrc2stats.set(ssrc, ssrcStats);\n        }\n\n        let isDownloadStream = true;\n        let key = 'packetsReceived';\n        let packetsNow = getStatValue(now, key);\n\n        if (typeof packetsNow === 'undefined'\n            || packetsNow === null || packetsNow === '') {\n            isDownloadStream = false;\n            key = 'packetsSent';\n            packetsNow = getStatValue(now, key);\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\n                logger.warn('No packetsReceived nor packetsSent stat found');\n            }\n        }\n        if (!packetsNow || packetsNow < 0) {\n            packetsNow = 0;\n        }\n\n        const packetsBefore = this.getNonNegativeStat(before, key);\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n        const packetsLostNow\n            = this.getNonNegativeStat(now, 'packetsLost');\n        const packetsLostBefore\n            = this.getNonNegativeStat(before, 'packetsLost');\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n        ssrcStats.setLoss({\n            packetsTotal: packetsDiff + packetsLostDiff,\n            packetsLost: packetsLostDiff,\n            isDownloadStream\n        });\n\n        const bytesReceivedNow\n            = this.getNonNegativeStat(now, 'bytesReceived');\n        const bytesReceivedBefore\n            = this.getNonNegativeStat(before, 'bytesReceived');\n        const bytesReceived\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\n\n        let bytesSent = 0;\n\n        // TODO: clean this mess up!\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\n\n        if (typeof nowBytesTransmitted === 'number'\n            || typeof nowBytesTransmitted === 'string') {\n            nowBytesTransmitted = Number(nowBytesTransmitted);\n            if (!isNaN(nowBytesTransmitted)) {\n                byteSentStats[ssrc] = nowBytesTransmitted;\n                if (nowBytesTransmitted > 0) {\n                    bytesSent = nowBytesTransmitted\n                        - getStatValue(before, 'bytesSent');\n                }\n            }\n        }\n        bytesSent = Math.max(0, bytesSent);\n\n        const timeMs = now.timestamp - before.timestamp;\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\n\n        if (timeMs > 0) {\n            // TODO is there any reason to round here?\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\n        }\n\n        ssrcStats.addBitrate({\n            'download': bitrateReceivedKbps,\n            'upload': bitrateSentKbps\n        });\n\n        const resolution = {\n            height: null,\n            width: null\n        };\n\n        try {\n            let height, width;\n\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\n                resolution.height = height;\n                resolution.width = width;\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\n                resolution.height = height;\n                resolution.width = width;\n            }\n        } catch (e) { /* not supported*/ }\n\n        // Tries to get frame rate\n        let frameRate;\n\n        try {\n            frameRate = getStatValue(now, 'googFrameRateReceived')\n                || getStatValue(now, 'googFrameRateSent') || 0;\n        } catch (e) {\n            // if it fails with previous properties(chrome),\n            // let's try with another one (FF)\n            try {\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\n            } catch (err) { /* not supported*/ }\n        }\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n        if (resolution.height && resolution.width) {\n            ssrcStats.setResolution(resolution);\n        } else {\n            ssrcStats.setResolution(null);\n        }\n\n        let codec;\n\n        // Try to get the codec for later reporting.\n        try {\n            codec = getStatValue(now, 'googCodecName') || '';\n        } catch (e) { /* not supported*/ }\n\n        ssrcStats.setCodec(codec);\n    }\n\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec = '';\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec = '';\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec.length && videoCodec.length) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n\n    for (const idx in this.currentAudioLevelsReport) {\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n\n        const now = this.currentAudioLevelsReport[idx];\n\n        if (now.type !== 'ssrc' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.baselineAudioLevelsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before) {\n            logger.warn(`${ssrc} not enough data`);\n            continue;\n        }\n\n        if (!ssrc) {\n            if ((Date.now() - now.timestamp) < 3000) {\n                logger.warn('No ssrc: ');\n            }\n            continue;\n        }\n\n        // Audio level\n        let audioLevel;\n\n        try {\n            audioLevel\n                = getStatValue(now, 'audioInputLevel')\n                    || getStatValue(now, 'audioOutputLevel');\n        } catch (e) { /* not supported*/\n            logger.warn('Audio Levels are not available in the statistics.');\n            clearInterval(this.audioLevelsIntervalId);\n\n            return;\n        }\n\n        if (audioLevel) {\n            let isLocal;\n\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\n            if (now.type === 'ssrc') {\n                isLocal = !getStatValue(now, 'packetsReceived');\n\n            // If type=\"track\", check remoteSource boolean property.\n            } else {\n                isLocal = !now.remoteSource;\n            }\n\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\n            // 0..1 range (0 == silence). However browsers don't behave that\n            // way so we must convert it to 0..1.\n            // TODO: Can't find specs about what this value really is, but it\n            // seems to vary between 0 and around 32k.\n            audioLevel = audioLevel / 32767;\n\n            if (!(ssrc in this.audioLevelReportHistory)) {\n                this.audioLevelReportHistory[ssrc] = {\n                    isLocal,\n                    data: []\n                };\n            }\n            this.audioLevelReportHistory[ssrc].data.push(audioLevel);\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    }\n};\n\n/* eslint-enable no-continue */\n\n/**\n * New promised based getStats report processing.\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\n * frameRate stat is missing and calculating it using framesSent,\n * gives values double the values seen in webrtc-internals.\n * https://w3c.github.io/webrtc-stats/\n */\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\n * Promised based getStats.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => item[keyFromName(name)];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing new getStats logic.\n */\nStatsCollector.prototype.processNewStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n\n        // RTCIceCandidatePairStats\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair'\n            && now.nominated\n            && now.state === 'succeeded') {\n\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate\n                = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate\n                = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            // safari currently does not provide ice candidates in stats\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\n                const localPort = getStatValue(localUsedCandidate, 'port');\n\n                const localIp = `${localIpAddress}:${localPort}`;\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(\n                        t =>\n                            t.ip === ip\n                            && t.type === type\n                            && t.localip === localIp)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localIp,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow\n                = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore\n                = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff\n                = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            if (now.type === 'inbound-rtp') {\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(\n                                    now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n\n                // RTCInboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\n                // TODO: can we use framesDecoded for frame rate, available\n                // in chrome\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(\n                                now, before, 'bytesSent')\n                });\n\n                // RTCOutboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\n                // TODO: can we use framesEncoded for frame rate, available\n                // in chrome\n            }\n\n            // FF has framerateMean out of spec\n            const framerateMean = now.framerateMean;\n\n            if (framerateMean) {\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\n            }\n\n        // track for resolution\n        // RTCVideoHandlerStats\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track') {\n\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n\n            // Tries to get frame rate\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                // we need to calculate it\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore\n                            = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            const trackIdentifier = now.trackIdentifier;\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            } else {\n                ssrcStats.setResolution(null);\n            }\n        }\n    });\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processNewAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n/**\n * End new promised based getStats processing methods.\n */\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction fixStatsType(stat) {\n  return {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  }[stat.type] || stat.type;\n}\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId ||\n        transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId;\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        trackId + '\\r\\n';\n    sdp += 'a=' + msid;\n    // for Chrome. Legacy should no longer be required.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n\n    // RTX\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n  e.code = {\n    NotSupportedError: 9,\n    InvalidStateError: 11,\n    InvalidAccessError: 15,\n    TypeError: undefined,\n    OperationError: undefined\n  }[name];\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this._localDescription = null;\n    this._remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.connectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\n    configurable: true,\n    get: function() {\n      return this._localDescription;\n    }\n  });\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\n    configurable: true,\n    get: function() {\n      return this._remoteDescription;\n    }\n  });\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    if (!doNotAdd) {\n      this.transceivers.push(transceiver);\n    }\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        // also the usernameFragment. TODO: update SDP to take both variants.\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n\n        event.candidate.candidate = serializedCandidate;\n        event.candidate.toJSON = function() {\n          return {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\n            usernameFragment: event.candidate.usernameFragment\n          };\n        };\n      }\n\n      // update local description.\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc._localDescription.sdp =\n          SDPUtils.getDescription(pc._localDescription.sdp) +\n          sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateIceConnectionState();\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.rejected) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc._localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\n          protocol === 'UDP/DTLS/SCTP'))) {\n        // TODO: this is dangerous in the case where a non-rejected m-line\n        //     becomes rejected.\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          kind: kind,\n          protocol: protocol,\n          rejected: true\n        };\n        return;\n      }\n\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\n          pc.transceivers[sdpMLineIndex].rejected) {\n        // recycle a rejected transceiver.\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        // If the offer contained RTX but the answer did not,\n        // remove RTX from sendEncodingParameters.\n        var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\n          return c.name.toLowerCase() === 'rtx';\n        }).length;\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n          delete transceiver.sendEncodingParameters[0].rtx;\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc._remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the ice connection state.\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n      }\n    });\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.checking > 0) {\n      newState = 'checking';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    } else if (states.completed > 0) {\n      newState = 'completed';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\n          !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      }\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.connectionState) {\n      this.connectionState = newState;\n      var event = new Event('connectionstatechange');\n      this._dispatchEvent('connectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n\n        // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n        if (transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function(rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    if (!(pc.signalingState === 'have-remote-offer' ||\n        pc.signalingState === 'have-local-pranswer')) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n        pc._remoteDescription.sdp).length;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.rejected) {\n        if (transceiver.kind === 'application') {\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n          } else {\n            sdp += 'm=application 0 ' + transceiver.protocol +\n                ' webrtc-datachannel\\r\\n';\n          }\n        } else if (transceiver.kind === 'audio') {\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\n              'a=rtpmap:0 PCMU/8000\\r\\n';\n        } else if (transceiver.kind === 'video') {\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\n              'a=rtpmap:120 VP8/90000\\r\\n';\n        }\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=inactive\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc._remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].rejected) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.rejected) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function(selector) {\n    if (selector && selector instanceof window.MediaStreamTrack) {\n      var senderOrReceiver = null;\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.rtpSender &&\n            transceiver.rtpSender.track === selector) {\n          senderOrReceiver = transceiver.rtpSender;\n        } else if (transceiver.rtpReceiver &&\n            transceiver.rtpReceiver.track === selector) {\n          senderOrReceiver = transceiver.rtpReceiver;\n        }\n      });\n      if (!senderOrReceiver) {\n        throw makeError('InvalidAccessError', 'Invalid selector.');\n      }\n      return senderOrReceiver.getStats();\n    }\n\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    return Promise.all(promises).then(function(allStats) {\n      var results = new Map();\n      allStats.forEach(function(stats) {\n        stats.forEach(function(stat) {\n          results.set(stat.id, stat);\n        });\n      });\n      return results;\n    });\n  };\n\n  // fix low-level stat names and return Map instead of object.\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\n    'RTCIceTransport', 'RTCDtlsTransport'];\n  ortcObjects.forEach(function(ortcObjectName) {\n    var obj = window[ortcObjectName];\n    if (obj && obj.prototype && obj.prototype.getStats) {\n      var nativeGetstats = obj.prototype.getStats;\n      obj.prototype.getStats = function() {\n        return nativeGetstats.apply(this)\n        .then(function(nativeStats) {\n          var mapStats = new Map();\n          Object.keys(nativeStats).forEach(function(id) {\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\n            mapStats.set(id, nativeStats[id]);\n          });\n          return mapStats;\n        });\n      };\n    }\n  });\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/* global __filename, RTCSessionDescription */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport {\n    TRACK_ADDED,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport LocalSdpMunger from './LocalSdpMunger';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RtxModifier from '../xmpp/RtxModifier';\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\nimport SDP from '../xmpp/SDP';\nimport SdpConsistency from '../xmpp/SdpConsistency';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_BITRATE = 2500000;\nconst DESKSTOP_SHARE_RATE = 500000;\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used\n * in a peer to peer connection\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\n * the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\n * @param {boolean} options.capScreenshareBitrate if set to 'true' simulcast will\n * be disabled for screenshare and a max bitrate of 500Kbps will applied on the\n * stream.\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\n *      disabled by removing it from the SDP.\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\n * over other video codecs.\n * @param {boolean} options.enableLayerSuspension if set to 'true', we will\n * cap the video send bitrate when we are told we have not been selected by\n * any endpoints (and therefore the non-thumbnail streams are not in use).\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, constraints);\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: browser.usesUnifiedPlan()\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this);\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use stream events in plan-b and track events in unified plan.\n    if (browser.usesPlanB()) {\n        this.peerconnection.onaddstream\n            = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream\n            = event => this._remoteStreamRemoved(event.stream);\n    } else {\n        this.peerconnection.ontrack = event => {\n            const stream = event.streams[0];\n\n            this._remoteTrackAdded(stream, event.track, event.transceiver);\n            stream.onremovetrack = evt => {\n                this._remoteTrackRemoved(stream, evt.track);\n            };\n        };\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats(stats => {\n                if (stats.result\n                    && typeof stats.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            }, () => {\n\n                // empty error callback\n            });\n        }, 1000);\n    }\n\n    // Set sender video constraints when a new local video track is added\n    // to the conference or when it is unmuted.\n    this.senderVideoMaxHeight = null;\n    const maybeSetSenderVideoConstraints = track => {\n        if (track.isLocal()\n            && !track.isMuted()\n            && track.isVideoTrack()\n            && track.videoType === VideoType.CAMERA\n            && this.senderVideoMaxHeight) {\n            this.setSenderVideoConstraint(this.senderVideoMaxHeight)\n                .catch(err => {\n                    logger.error(`Settings sender video constraints failed: ${err}`);\n                });\n        }\n    };\n\n    this.rtc.conference.on(\n        TRACK_ADDED,\n        maybeSetSenderVideoConstraints);\n    this.rtc.conference.on(\n        TRACK_MUTE_CHANGED,\n        maybeSetSenderVideoConstraints);\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\n        mediaType) {\n    let mediaTransferActive = true;\n\n    if (mediaType === MediaType.AUDIO) {\n        mediaTransferActive = this.audioTransferActive;\n    } else if (mediaType === MediaType.VIDEO) {\n        mediaTransferActive = this.videoTransferActive;\n    }\n    if (mediaTransferActive) {\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\n    }\n\n    return 'inactive';\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error('On peerMuteChanged - no endpoint ID');\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n    logger.info(`${this} remote track added:`, streamId, mediaType);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = browser.usesPlanB()\n        ? new SDP(this.remoteDescription.sdp)\n        : new SDP(this.peerconnection.remoteDescription.sdp);\n    let mediaLines;\n\n    if (browser.usesUnifiedPlan()) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No media lines for type ${\n                    mediaType} found in remote SDP for remote track: ${\n                    streamId}`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC lines for streamId ${\n                    streamId} for remote track, media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for: ${\n                    trackSsrc} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `${this}: no peer media info available for ${\n                    ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from\n        // 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(\n            `${this} ignored duplicated remote track added event for: `\n                + `${ownerEndpointId}, ${mediaType}`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(\n            `${this} overwriting remote track for`\n                + `${ownerEndpointId} ${mediaType}`);\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(\n            `${this} Removed track not found for msid: ${streamId},\n             track id: ${trackId}`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n\n    logger.debug(\n        `${this} removed remote tracks for ${owner} count: ${\n            removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * @typedef {Object} SSRCGroupInfo\n * @property {Array<number>} ssrcs group's SSRCs\n * @property {string} semantics\n */\n/**\n * @typedef {Object} TrackSSRCInfo\n * @property {Array<number>} ssrcs track's SSRCs\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\n */\n/**\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\n * @param {Object} desc the WebRTC SDP instance.\n * @return {Map<string,TrackSSRCInfo>}\n */\nfunction extractSSRCMap(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    for (const mLine of session.media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs\n                        = group.ssrcs.split(' ').map(\n                            ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n        for (const ssrc of mLine.ssrcs) {\n            if (ssrc.attribute !== 'msid') {\n                continue; // eslint-disable-line no-continue\n            }\n\n            const msid = ssrc.value;\n            let ssrcInfo = ssrcMap.get(msid);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid\n                };\n                ssrcMap.set(msid, ssrcInfo);\n            }\n\n            const ssrcNumber = ssrc.id;\n\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `recvonly-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia('audio');\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\n        if (options.startSilent) {\n            audioMedia.direction = 'inactive';\n        } else {\n            audioMedia.direction = 'sendrecv';\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\n        videoMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the\n        // SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug('getLocalDescription no localDescription found');\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug('getRemoteDescription no remoteDescription found');\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace(\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`add ${track} to: ${this}`);\n\n    if (this.localTracks.has(rtcId)) {\n        logger.error(`${track} is already in ${this}`);\n\n        return;\n    }\n\n    this.localTracks.set(rtcId, track);\n    if (browser.usesUnifiedPlan() && isInitiator) {\n        return this.tpcUtils.addTrack(track, isInitiator);\n    }\n\n    const webrtcStream = track.getOriginalStream();\n\n    if (webrtcStream) {\n        this._addStream(webrtcStream);\n\n    // It's not ok for a track to not have a WebRTC stream if:\n    } else if (!browser.doesVideoMuteByStreamRemove()\n                || track.isAudioTrack()\n                || (track.isVideoTrack() && !track.isMuted())) {\n        logger.error(`${this} no WebRTC stream for: ${track}`);\n    }\n\n    // Muted video tracks do not have WebRTC stream\n    if (browser.usesPlanB() && browser.doesVideoMuteByStreamRemove()\n            && track.isVideoTrack() && track.isMuted()) {\n        const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n        this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n        const simGroup\n            = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n        if (simGroup) {\n            this.simulcast.setSsrcCache(simGroup.ssrcs);\n        }\n        const fidGroups\n            = ssrcInfo.groups.filter(\n                groupInfo => groupInfo.semantics === 'FID');\n\n        if (fidGroups) {\n            const rtxSsrcMapping = new Map();\n\n            fidGroups.forEach(fidGroup => {\n                const primarySsrc = fidGroup.ssrcs[0];\n                const rtxSsrc = fidGroup.ssrcs[1];\n\n                rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n            });\n            this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n        }\n    }\n\n    if (browser.usesUnifiedPlan() && !browser.usesSdpMungingForSimulcast()) {\n        this.tpcUtils.setEncodings(track);\n    }\n\n    // Construct the simulcast stream constraints for the newly added track.\n    if (track.isVideoTrack() && track.videoType === VideoType.CAMERA && this.isSimulcastOn()) {\n        this.tpcUtils._setSimulcastStreamConstraints(track.getTrack());\n    }\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.addTrackUnmute(track);\n    }\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    logger.info(`Adding ${track} as unmute to ${this}`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(\n            `${methodName}: ${localTrack} does not belong to ${this}`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStream.\n *\n * @param {MediaStream} stream - The media stream used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByStream = function(stream) {\n    const track = stream.getTracks()[0];\n\n    if (!track) {\n        logger.error('Cannot find sender: no tracks.');\n\n        return;\n    }\n\n    // Find the right sender (for audio or video)\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack);\n    }\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        this.addTrack(newTrack);\n    }\n\n    return Promise.resolve(true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.removeTrackMute(localTrack);\n    }\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n    if (webRtcStream) {\n        logger.info(\n            `Removing ${localTrack} as mute from ${this}`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {Object} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\n        localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia('audio');\n\n    if (audioMedia) {\n        const desiredAudioDirection\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"audio\" media found int the local description');\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia) {\n        const desiredVideoDirection\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(\n                `Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"video\" media found in the local description');\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    if (this.options.disableH264 || this.options.preferH264) {\n        const parsedSdp = transform.parse(localSdp.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        if (this.options.disableH264) {\n            SDPUtil.stripVideoCodec(videoMLine, 'h264');\n        } else {\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n        }\n\n        localSdp = new RTCSessionDescription({\n            type: localSdp.type,\n            sdp: transform.write(parsedSdp)\n        });\n\n        this.trace('setLocalDescription::postTransform (H264)',\n            dumpSDP(localSdp));\n    }\n\n    if (browser.usesPlanB()) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.setAudioTransferActive(active);\n    }\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Sets the max bitrate on the RTCRtpSender so that the\n * bitrate of the enocder doesn't exceed the configured value.\n * This is needed for the desktop share until spec-complaint\n * simulcast is implemented.\n * @param {JitsiLocalTrack} localTrack - the local track whose\n * max bitrate is to be configured.\n */\nTraceablePeerConnection.prototype.setMaxBitRate = function(localTrack) {\n    const mediaType = localTrack.type;\n    const trackId = localTrack.track.id;\n    const videoType = localTrack.videoType;\n\n    // No need to set max bitrates on the streams in the following cases.\n    // 1. When an audio track has been replaced.\n    // 2. When a 'camera' track is replaced in plan-b mode, since its a new sender.\n    // 3. When the config.js option for capping the SS bitrate is not enabled.\n    if ((mediaType === MediaType.AUDIO)\n        || (browser.usesPlanB() && !this.options.capScreenshareBitrate)\n        || (browser.usesPlanB() && videoType === VideoType.CAMERA)) {\n        return;\n    }\n    if (!this.peerconnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTCRtpSender');\n\n        return;\n    }\n    const presenterEnabled = localTrack._originalStream\n        && localTrack._originalStream.id !== localTrack.getStreamId();\n\n    this.peerconnection.getSenders()\n        .filter(s => s.track && s.track.id === trackId)\n        .forEach(sender => {\n            try {\n                const parameters = sender.getParameters();\n\n                if (!parameters.encodings || !parameters.encodings.length) {\n                    return;\n                }\n                logger.debug('Setting max bitrate on video stream');\n                for (const encoding in parameters.encodings) {\n                    if (parameters.encodings.hasOwnProperty(encoding)) {\n                        // On chromium, set a max bitrate of 500 Kbps for screenshare when\n                        // capScreenshareBitrate is enabled through config.js and presenter\n                        // is not turned on.\n                        parameters.encodings[encoding].maxBitrate\n                            = browser.usesPlanB()\n                                ? presenterEnabled ? MAX_BITRATE : DESKSTOP_SHARE_RATE\n\n                                // In unified plan, simulcast for SS is on by default.\n                                // When simulcast is disabled through a config.js option,\n                                // we cap the bitrate on desktop and camera tracks to 2500 Kbps.\n                                : this.isSimulcastOn()\n                                    ? this.tpcUtils.simulcastEncodings[encoding].maxBitrate\n                                    : MAX_BITRATE;\n                    }\n                }\n                sender.setParameters(parameters);\n            } catch (err) {\n                logger.error('Browser does not support getParameters/setParamters '\n                    + 'or setting max bitrate on the encodings: ', err);\n            }\n        });\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    if (browser.usesPlanB()) {\n        // TODO the focus should squeze or explode the remote simulcast\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n            this.trace(\n                'setRemoteDescription::postTransform (simulcast)',\n                dumpSDP(description));\n        }\n\n        if (this.options.preferH264) {\n            const parsedSdp = transform.parse(description.sdp);\n            const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n\n            // eslint-disable-next-line no-param-reassign\n            description = new RTCSessionDescription({\n                type: description.type,\n                sdp: transform.write(parsedSdp)\n            });\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils._insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils._ensureCorrectOrderOfSsrcs(description);\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on\n * the user preferred value. If simulcast is enabled on the peerconection, all the\n * simulcast encodings that have a resolution height lower or equal to the value\n * provided will remain active. For the non-simulcast case, video constraint is\n * applied on the track.\n * @param {number} frameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight) {\n    this.senderVideoMaxHeight = frameHeight;\n    const localVideoTrack = Array.from(this.localTracks.values()).find(t => t.isVideoTrack());\n\n    if (!localVideoTrack || localVideoTrack.isMuted() || localVideoTrack.videoType !== VideoType.CAMERA) {\n        return Promise.resolve();\n    }\n    const track = localVideoTrack.getTrack();\n\n    if (this.isSimulcastOn()) {\n        let promise = Promise.resolve();\n\n        // Check if the track constraints have been modified in p2p mode, apply\n        // the constraints that were used for creating the track if that is the case.\n        const height = localVideoTrack._constraints.height.ideal\n            ? localVideoTrack._constraints.height.ideal\n            : localVideoTrack._constraints.height;\n\n        if (track.getSettings().height !== height) {\n            promise = track.applyConstraints(localVideoTrack._constraints);\n        }\n\n        return promise\n            .then(() => {\n                // Determine the encodings that need to stay enabled based on the\n                // new frameHeight provided.\n                const encodingsEnabledState = this.tpcUtils.simulcastStreamConstraints\n                    .map(constraint => constraint.height <= frameHeight);\n                const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n                if (!videoSender) {\n                    return Promise.reject(new Error('RTCRtpSender not found for local video'));\n                }\n                const parameters = videoSender.getParameters();\n\n                if (!parameters || !parameters.encodings || !parameters.encodings.length) {\n                    return Promise.reject(new Error('RTCRtpSendParameters not found for local video track'));\n                }\n                logger.debug(`Setting max height of ${frameHeight} on local video`);\n                for (const encoding in parameters.encodings) {\n                    if (parameters.encodings.hasOwnProperty(encoding)) {\n                        parameters.encodings[encoding].active = encodingsEnabledState[encoding];\n                    }\n                }\n\n                return videoSender.setParameters(parameters);\n            });\n    }\n\n    // Apply the height constraint on the local camera track\n    const aspectRatio = (track.getSettings().width / track.getSettings().height).toPrecision(4);\n\n    logger.debug(`Setting max height of ${frameHeight} on local video`);\n\n    return track.applyConstraints(\n        {\n            aspectRatio,\n            height: {\n                ideal: frameHeight\n            }\n        });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.setVideoTransferActive(active);\n    }\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info('Clearing primary video SSRC!');\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error('RTC._removePeerConnection returned false');\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`Closing ${this}...`);\n    this.peerconnection.close();\n};\n\n/**\n * Modifies the values of the setup attributes (defined by\n * {@link http://tools.ietf.org/html/rfc4145#section-4}) of a specific SDP\n * answer in order to overcome a delay of 1 second in the connection\n * establishment between some devices and Videobridge.\n *\n * @param {SDP} offer - the SDP offer to which the specified SDP answer is\n * being prepared to respond\n * @param {SDP} answer - the SDP to modify\n * @private\n */\nconst _fixAnswerRFC4145Setup = function(offer, answer) {\n    if (!(browser.isChromiumBased() || browser.isReactNative())) {\n        // It looks like Firefox doesn't agree with the fix (at least in its\n        // current implementation) because it effectively remains active even\n        // after we tell it to become passive. Apart from Firefox which I tested\n        // after the fix was deployed, I tested Chrome only. In order to prevent\n        // issues with other browsers, limit the fix to known devices for the\n        // time being.\n        return;\n    }\n\n    // XXX Videobridge is the (SDP) offerer and WebRTC (e.g. Chrome) is the\n    // answerer (as orchestrated by Jicofo). In accord with\n    // http://tools.ietf.org/html/rfc5245#section-5.2 and because both peers\n    // are ICE FULL agents, Videobridge will take on the controlling role and\n    // WebRTC will take on the controlled role. In accord with\n    // https://tools.ietf.org/html/rfc5763#section-5, Videobridge will use the\n    // setup attribute value of setup:actpass and WebRTC will be allowed to\n    // choose either the setup attribute value of setup:active or\n    // setup:passive. Chrome will by default choose setup:active because it is\n    // RECOMMENDED by the respective RFC since setup:passive adds additional\n    // latency. The case of setup:active allows WebRTC to send a DTLS\n    // ClientHello as soon as an ICE connectivity check of its succeeds.\n    // Unfortunately, Videobridge will be unable to respond immediately because\n    // may not have WebRTC's answer or may have not completed the ICE\n    // connectivity establishment. Even more unfortunate is that in the\n    // described scenario Chrome's DTLS implementation will insist on\n    // retransmitting its ClientHello after a second (the time is in accord\n    // with the respective RFC) and will thus cause the whole connection\n    // establishment to exceed at least 1 second. To work around Chrome's\n    // idiosyncracy, don't allow it to send a ClientHello i.e. change its\n    // default choice of setup:active to setup:passive.\n    if (offer && answer\n            && offer.media && answer.media\n            && offer.media.length === answer.media.length) {\n        answer.media.forEach((a, i) => {\n            if (SDPUtil.findLine(\n                    offer.media[i],\n                    'a=setup:actpass',\n                    offer.session)) {\n                answer.media[i]\n                    = a.replace(/a=setup:active/g, 'a=setup:passive');\n            }\n        });\n        answer.raw = answer.session + answer.media.join('');\n    }\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\n/**\n * Checks if a camera track has been added to the peerconnection\n * @param {TraceablePeerConnection} peerConnection\n * @return {boolean} <tt>true</tt> if the peerconnection has\n * a camera track for its video source <tt>false</tt> otherwise.\n */\nfunction hasCameraTrack(peerConnection) {\n    return peerConnection.getLocalTracks()\n        .some(t => t.videoType === 'camera');\n}\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (browser.usesPlanB()) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // configure simulcast for camera tracks always and for\n            // desktop tracks only when the testing flag for maxbitrates\n            // in config.js is disabled.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (!this.options.capScreenshareBitrate\n                || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Fix the setup attribute (see _fixAnswerRFC4145Setup for\n            //  details)\n            if (!isOffer) {\n                const remoteDescription\n                    = new SDP(this.remoteDescription.sdp);\n                const localDescription = new SDP(resultSdp.sdp);\n\n                _fixAnswerRFC4145Setup(remoteDescription, localDescription);\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: localDescription.raw\n                });\n            }\n\n            const ssrcMap = extractSSRCMap(resultSdp);\n\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const trackMSID = track.storedMSID;\n\n        if (ssrcMap.has(trackMSID)) {\n            const newSSRC = ssrcMap.get(trackMSID);\n\n            if (!newSSRC) {\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                if (oldSSRCNum === null) {\n                    logger.info(\n                        `Storing new local SSRC for ${track} in ${this}`,\n                        newSSRC);\n                } else {\n                    logger.error(\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\n                        } with: `, newSSRC);\n                }\n                this.localSSRCs.set(track.rtcId, newSSRC);\n\n                this.eventEmitter.emit(\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            } else {\n                logger.debug(\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\n                     + `is still up to date in ${this}`);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @param {Function} callback - The function to invoke after successfully\n * obtaining stats.\n * @param {Function} errback - The function to invoke after failing to obtain\n * stats.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\n    // accounting for different getStats apis, making the browser-checking-if\n    // unnecessary.\n    if (browser.isSafari() || browser.isFirefox() || browser.isReactNative()) {\n        // uses the new Promise based getStats\n        this.peerconnection.getStats()\n            .then(callback)\n            .catch(errback || (() => {\n\n                // Making sure that getStats won't fail if error callback is\n                // not passed.\n            }));\n    } else {\n        this.peerconnection.getStats(callback);\n    }\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\n    }\n\n    // configure simulcast for camera tracks always and for\n    // desktop tracks only when the testing flag for maxbitrates\n    // in config.js is disabled.\n    if (this.isSimulcastOn()\n        && (!this.options.capScreenshareBitrate\n        || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\nconst handleLayerSuspension = function(peerConnection, isSelected) {\n    if (!peerConnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTPSender');\n\n        return;\n    }\n\n    const videoSender = peerConnection.getSenders()\n        .find(sender => sender.track.kind === 'video');\n\n    if (!videoSender) {\n        logger.warn('handleLayerSuspension unable to find video sender');\n\n        return;\n    }\n    if (!videoSender.getParameters) {\n        logger.debug('Browser doesn\\'t support RTPSender parameters');\n\n        return;\n    }\n    const parameters = videoSender.getParameters();\n\n    if (isSelected) {\n        logger.debug('Currently selected, enabling all sim layers');\n\n        // Make sure all encodings are enabled\n        parameters.encodings.forEach(e => {\n            e.active = true;\n        });\n    } else {\n        logger.debug('Not currently selected, disabling upper layers');\n\n        // Turn off the upper simulcast layers\n        [ 1, 2 ].forEach(simIndex => {\n            if (parameters.encodings[simIndex]) {\n                parameters.encodings[simIndex].active = false;\n            }\n        });\n    }\n    videoSender.setParameters(parameters);\n};\n\n/**\n * Set whether or not the endpoint is 'selected' by other endpoints, meaning\n * it appears on their main stage\n */\nTraceablePeerConnection.prototype.setIsSelected = function(isSelected) {\n    if (this.options.enableLayerSuspension) {\n        logger.debug('Layer suspension enabled,'\n            + `currently selected? ${isSelected}`);\n        handleLayerSuspension(this.peerconnection, isSelected);\n    }\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\n};\n","import { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiTrack from './JitsiTrack';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\n];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        logger.debug(`Track has been attached to a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        logger.debug(`Track has been detached from a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     */\n    constructor(tpc) {\n        this.tpc = tpc;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            logger.debug(\n                `${this.tpc} ${videoTrack} muted: ${\n                    muted}, is in PeerConnection: ${\n                    isInPeerConnection} => should fake sdp ? : ${\n                    shouldFakeSdp}`);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = 'sendrecv';\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                logger.debug(\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\n                        videoTrack}`);\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    logger.debug(\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\n                        group);\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        const streamId = streamAndTrackIDs[0];\n                        const trackId = streamAndTrackIDs[1];\n\n                        ssrcLine.value\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\n                    } else {\n                        logger.warn(\n                            'Unable to munge local MSID'\n                                + `- weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\nimport SDPUtil from './SDPUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    logger.debug(\n        `Updating mline to associate ${rtxSsrc}`\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\n\n        return;\n    }\n    if (previousRtxSSRC) {\n        logger.debug(\n            `${primarySsrc} was previously associated with rtx`\n            + `${previousRtxSSRC}, removing all references to it`);\n\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\n        logger.debug(mLine.dumpSSRCGroups());\n\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return false;\n        }\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\n            ' making sure all have rtx streams');\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (correspondingRtxSsrc) {\n                logger.debug(\n                    'Already have an associated rtx ssrc for'\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\n            } else {\n                logger.debug(\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\n\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    logger.debug(\n                        `Rtx stream ${previousAssociatedRtxStream} `\n                        + 'already existed in the sdp as an rtx stream for '\n                        + `${ssrc}`);\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\n                                 + `for ssrc ${ssrc}`);\n                }\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\n                             + `for video ssrc ${ssrc}`);\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.logPrefix} no 'video' media found in the sdp: `\n                    + `${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(\n                    `${this.logPrefix} no SSRC found for the recvonly video`\n                        + 'stream!');\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency couldn't`\n                        + ' parse new primary ssrc');\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\n                        + `${newPrimarySsrc} with cached `\n                        + `${this.cachedPrimarySsrc}`);\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n                logger.info(\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\n                        + `${this.cachedPrimarySsrc}`);\n            }\n\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global\n    __filename\n*/\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","import {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    return this.xmpp.caps.addFeature(feature, submit);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    return this.xmpp.caps.removeFeature(feature, submit);\n};\n","/* global __filename, $, Promise */\nimport { Strophe } from 'strophe.js';\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport RTC from './modules/RTC/RTC';\nimport TalkMutedDetection from './modules/detection/TalkMutedDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedNotification\n    from './modules/connectivity/IceFailedNotification';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport E2EEContext from './modules/e2ee/E2EEContext';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport RttMonitor from './modules/rttmonitor/rttmonitor';\nimport Settings from './modules/settings/Settings';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport { QualityController } from './modules/qualitycontrol/QualityController';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\n * (don't open any channel).\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n    this._conferenceJoinAnalyticsEventSent = false;\n\n    if (browser.supportsInsertableStreams()) {\n        this._e2eeCtx = new E2EEContext({ salt: this.options.name });\n    }\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.rttMonitor = new RttMonitor(config.rttMonitor || {});\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.qualityController = new QualityController(this);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && !browser.isSafari()) {\n\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n\n\n        } else {\n            logger.info('Using audio level based detection for generating talk while muted events');\n            this._talkWhileMutedDetection = new TalkMutedDetection(\n                this, () => this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && !browser.isSafari()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n */\nJitsiConference.prototype.join = function(password) {\n    if (this.room) {\n        this.room.join(password).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.rttMonitor) {\n        this.rttMonitor.stop();\n        this.rttMonitor = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\n\n        this.room.sendMessage(message, elementName, displayName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addToPresence(name, values);\n        this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        this.room.addToPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        });\n        this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (track.isVideoTrack()) {\n        // Ensure there's exactly 1 local video track in the conference.\n        const localVideoTrack = this.rtc.getLocalVideoTrack();\n\n        if (localVideoTrack) {\n            // Don't be excessively harsh and severe if the API client happens\n            // to attempt to add the same local video track twice.\n            if (track === localVideoTrack) {\n                return Promise.resolve(track);\n            }\n\n            return Promise.reject(new Error(\n                'cannot add second video track to the conference'));\n\n        }\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Setup E2EE on the sender that is created for the unmuted track.\n    if (this._e2eeCtx && !track.isMuted() && browser.doesVideoMuteByStreamRemove()) {\n        if (this.p2pJingleSession) {\n            this._setupSenderE2EEForTrack(this.p2pJingleSession, track);\n        }\n        if (this.jvbJingleSession) {\n            this._setupSenderE2EEForTrack(this.jvbJingleSession, track);\n        }\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the\n                // JitsiConference level\n                this._setupNewTrack(newTrack);\n            }\n\n            return Promise.resolve();\n        }, error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        this.removeCommand('videoType');\n        this.sendCommand('videoType', {\n            value: newTrack.videoType,\n            attributes: {\n                xmlns: 'http://jitsi.org/jitmeet/video'\n            }\n        });\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    // Setup E2EE on the new track that has been added\n    // to the conference, apply it on all the open peerconnections.\n    if (this._e2eeCtx) {\n        if (this.p2pJingleSession) {\n            this._setupSenderE2EEForTrack(this.p2pJingleSession, newTrack);\n        }\n        if (this.jvbJingleSession) {\n            this._setupSenderE2EEForTrack(this.jvbJingleSession, newTrack);\n        }\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no P2P Jingle session started yet');\n    }\n\n    return Promise.all(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(\n            this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(\n            this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.all(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.rtc.selectEndpoints(participantIds);\n};\n\n/**\n * Elects the participant with the given id to be the pinned participant in\n * order to always receive video for this participant (even when last n is\n * enabled).\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n */\nJitsiConference.prototype.pinParticipant = function(participantId) {\n    this.rtc.pinEndpoint(participantId);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.rtc.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.rtc.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.keys(this.participants).map(function(key) {\n        return this.participants[key];\n    }, this);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid());\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant._role = role;\n    participant._botType = botType;\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    this._maybeStartOrStopP2P();\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has('http://jitsi.org/protocol/jigasi')) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has('https://jitsi.org/meet/e2ee')) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant._botType = botType;\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant._botType) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    const removedTracks = this.rtc.removeRemoteTracks(id);\n\n    removedTracks.forEach(\n        track =>\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track));\n\n    // there can be no participant in case the member that left is focus\n    if (participant) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    this._maybeStartOrStopP2P(true /* triggered by user left event */);\n    this._maybeClearSITimeout();\n};\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n */\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId) {\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant._role = role;\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    // Setup E2EE handling, if supported.\n    this._setupReceiverE2EEForTrack(track);\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        // Setup E2EE.\n        const localTracks = this.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if (!browser.supportsP2P()) {\n        rejectReason = {\n            reason: 'unsupported-applications',\n            reasonDescription: 'P2P not supported',\n            errorMsg: 'This client does not support P2P connections'\n        };\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(this.room, this.rtc, this.options.config);\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    // Add local tracks to the session\n    const localTracks = this.getLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                    jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                        jingleSession);\n                }\n\n                // Setup E2EE.\n                for (const track of localTracks) {\n                    this._setupSenderE2EEForTrack(jingleSession, track);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    let bridgeChannelType;\n\n    switch (this.options.config.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        bridgeChannelType = 'datachannel';\n        break;\n    case 'websocket':\n        bridgeChannelType = 'websocket';\n        break;\n    }\n\n    if (bridgeChannelType === 'datachannel') {\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection;\n    }\n\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addToPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    });\n    this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConference.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        if (!this.options.config.enableIceRestart) {\n            logger.info('ICE Failed and ICE restarts are disabled');\n            this.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.ICE_FAILED);\n\n            return;\n        }\n\n        if (this.xmpp.isPingSupported()) {\n            this._delayedIceFailed = new IceFailedNotification(this);\n            this._delayedIceFailed.start(session);\n        } else {\n            // Let Jicofo know that the JVB's ICE connection has failed\n            logger.info('PING not supported - sending ICE failed immediately');\n            session.sendIceFailedNotification();\n        }\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                this.p2pJingleSession);\n\n            // Setup E2EE.\n            for (const track of localTracks) {\n                this._setupSenderE2EEForTrack(jingleSession, track);\n            }\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms',\n            'octo-enabled'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.rtc.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    // NOTE one may consider to start P2P with the local tracks detached,\n    // but no data will be sent until ICE succeeds anyway. And we switch\n    // immediately once the P2P ICE connects.\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!browser.supportsP2P()\n        || !this.isP2PEnabled()\n        || this.isP2PTestModeEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p._botType === 'poltergeist') !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.qualityController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.qualityController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = true;\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return Boolean(this._e2eeCtx);\n};\n\n/**\n * Sets the key to be used for End-To-End encryption.\n *\n * @param {string} key the key to be used.\n * @returns {void}\n */\nJitsiConference.prototype.setE2EEKey = function(key) {\n    if (!this._e2eeCtx) {\n        logger.warn('Cannot set E2EE key: there is no defined context, platform is likely unsupported.');\n\n        return;\n    }\n\n    this._e2eeCtx.setKey(key);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Setup E2EE for the sending side, if supported.\n * Note that this is only done for the JVB Peer Connecction.\n *\n * @returns {void}\n */\nJitsiConference.prototype._setupSenderE2EEForTrack = function(session, track) {\n    if (!this._e2eeCtx) {\n        return;\n    }\n    const pc = session.peerconnection;\n    const sender = pc.findSenderForTrack(track.track);\n\n    if (sender) {\n        this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n    } else {\n        logger.warn(`Could not handle E2EE for local ${track.getType()} track: sender not found`);\n    }\n};\n\n/**\n * Setup E2EE for the receiving side, if supported.\n * Note that this is only done for the JVB Peer Connecction.\n *\n * @returns {void}\n */\nJitsiConference.prototype._setupReceiverE2EEForTrack = function(track) {\n    if (!this._e2eeCtx) {\n        return;\n    }\n    const session = track.isP2P ? this.p2pJingleSession : this.jvbJingleSession;\n    const pc = session && session.peerconnection;\n\n    if (pc) {\n        const receiver = pc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for remote ${track.getType()} track: receiver not found`);\n        }\n    }\n};\n","/* global __filename */\nimport { Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport Statistics from './modules/statistics/statistics';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const participant = conference.getParticipantById(\n                    Strophe.getResourceFromJid(jid));\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts, displayName);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        id => {\n            if (conference.lastDominantSpeaker !== id && conference.room) {\n                conference.lastDominantSpeaker = id;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\n\n                if (conference.statistics && conference.myUserId() === id) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(\n                        conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    conference.xmpp.caps.removeListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    const featuresChangedListener = from => {\n        const participant\n            = conference.getParticipantById(\n            Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\n                participant);\n        }\n    };\n\n    conference.xmpp.caps.addListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        featuresChangedListener);\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\n        = featuresChangedListener;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","\nimport { Strophe } from 'strophe.js';\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { ERROR_FEATURE_VERSION_MISMATCH } from './modules/xmpp/Caps';\nimport * as MediaType from './service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(timeout = 5000) {\n        if (this._getFeaturesPromise) {\n            return this._getFeaturesPromise;\n        }\n\n        this._getFeaturesPromise = this._conference.xmpp.caps.getFeatures(this._jid, timeout)\n            .catch(error => {\n                // Retry on feature version mismatch\n                if (error === ERROR_FEATURE_VERSION_MISMATCH) {\n                    return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\n                }\n\n                logger.warn(`Failed to discover features of ${this._jid}`, error);\n\n                return Promise.reject(error);\n            });\n\n        return this._getFeaturesPromise\n            .then(result => {\n                this._getFeaturesPromise = undefined;\n\n                return result;\n            }, error => {\n                this._getFeaturesPromise = undefined;\n\n                throw error;\n            });\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport Lobby from './Lobby';\nimport Moderator from './moderator';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        // We need to broadcast 'videomuted' status from the beginning, cause\n        // Jicofo makes decisions based on that. Initialize it with 'false'\n        // here.\n        this.addVideoInfoToPresence(false);\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @param {Object} customJoinPresenceExtensions - Key values object to be used\n     * for the initial presence, they key will be an xmpp node and its text is the value,\n     * and those will be added to the initial <x xmlns='http://jabber.org/protocol/muc'/>\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, customJoinPresenceExtensions) {\n        this.password = password;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true, customJoinPresenceExtensions);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     * @param customJoinPresenceExtensions - Object of key values to be added to the initial presence only.\n     */\n    sendPresence(fromJoin, customJoinPresenceExtensions) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (customJoinPresenceExtensions) {\n                Object.keys(customJoinPresenceExtensions).forEach(key => {\n                    pres.c(key).t(customJoinPresenceExtensions[key]).up();\n                });\n            }\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, jid);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                memberOfThis.isFocus = true;\n                this._initFocus(from, jid);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param mucJid the jid of the focus in the muc\n     */\n    _initFocus(from, mucJid) {\n        this.focusMucJid = from;\n\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendMessage(message, elementName, nickname) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendPrivateMessage(id, message, elementName, nickname) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from));\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const nick\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\n                .text()\n            || Strophe.getResourceFromJid(from);\n\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n        const jsonMessage = $(msg).find('>json-message').text();\n        const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n        // We emit this event if the message is a valid json, and is not\n        // delivered after a delay, i.e. stamp is undefined.\n        // e.g. - subtitles should not be displayed if delayed.\n        if (parsedJson && stamp === undefined) {\n            this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                from, parsedJson);\n\n            return;\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    kick(jid) {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t('You have been kicked.').up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            let sendGrantMembershipIq = false;\n\n            // first grant membership to all that are in the room\n            const grantMembership = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' });\n\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    grantMembership.c('item', {\n                        'affiliation': 'member',\n                        'jid': m.jid }).up();\n                    sendGrantMembershipIq = true;\n                }\n            });\n\n            if (sendGrantMembershipIq) {\n                this.xmpp.connection.sendIQ(grantMembership.up());\n            }\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key\n     * @param values\n     */\n    addToPresence(key, values) {\n        values.tagName = key;\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        this.addToPresence(\n            'audiomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        this.addAudioInfoToPresence(mute);\n\n        // FIXME resend presence on CONNECTED\n        this.sendPresence();\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        this.addToPresence(\n            'videomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute);\n        this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: false, // unmuted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     */\n    muteParticipant(jid, mute) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: 'http://jitsi.org/jitmeet/audio',\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this.clean();\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { $msg, Strophe } from 'strophe.js';\nimport { getLogger } from 'jitsi-meet-logger';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Leaves the lobby room.\n     * @private\n     */\n    _leaveLobbyRoom() {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.removeFromPresence('nick');\n            this.lobbyRoom.addToPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed let's join and leave lobby\n                        this.mainRoom.join(invitePassword);\n\n                        this._leaveLobbyRoom();\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid && jid === this.mainRoom.roomjid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this._leaveLobbyRoom();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.removeFromPresence(EMAIL_COMMAND);\n                    this.lobbyRoom.addToPresence(EMAIL_COMMAND, { value: email });\n                    this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: this.mainRoom.roomjid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","/* global $, Promise */\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nimport { $iq, Strophe } from 'strophe.js';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nimport Settings from '../settings/Settings';\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\n    // it will be enabled automatically if focus detects the component through\n    // service discovery.\n    this.sipGatewayEnabled\n        = this.options.connection.hosts\n            && this.options.connection.hosts.call_control !== undefined;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n    if (this.options.connection.enforcedBridge !== undefined) {\n        elem.c(\n            'property', {\n                name: 'enforcedBridge',\n                value: this.options.connection.enforcedBridge\n            }).up();\n    }\n\n    // Tell the focus we have Jigasi configured\n    if (this.options.connection.hosts !== undefined\n        && this.options.connection.hosts.call_control !== undefined) {\n        elem.c(\n            'property', {\n                name: 'call_control',\n                value: this.options.connection.hosts.call_control\n            }).up();\n    }\n    if (config.channelLastN !== undefined) {\n        elem.c(\n            'property', {\n                name: 'channelLastN',\n                value: config.channelLastN\n            }).up();\n    }\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.enableTcc !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableTcc',\n                    value: Boolean(config.enableTcc)\n                }).up();\n    }\n    if (config.enableRemb !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableRemb',\n                    value: Boolean(config.enableRemb)\n                }).up();\n    }\n    if (config.minParticipants !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'minParticipants',\n                    value: config.minParticipants\n                }).up();\n    }\n\n    elem.c(\n        'property', {\n            name: 'enableLipSync',\n            value: this.options.connection.enableLipSync === true\n        }).up();\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n    if (config.testing && config.testing.octo\n        && typeof config.testing.octo.probability === 'number') {\n        if (Math.random() < config.testing.octo.probability) {\n            elem.c(\n                'property', {\n                    name: 'octo',\n                    value: true\n                }).up();\n        }\n    }\n\n    let openSctp;\n\n    switch (this.options.conference.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        openSctp = true;\n        break;\n    case 'websocket':\n        openSctp = false;\n        break;\n    }\n\n    elem.c(\n        'property', {\n            name: 'openSctp',\n            value: openSctp\n        }).up();\n\n    if (config.opusMaxAverageBitrate) {\n        elem.c(\n            'property', {\n                name: 'opusMaxAverageBitrate',\n                value: config.opusMaxAverageBitrate\n            }).up();\n    }\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    if (this.options.conference.stereo !== undefined) {\n        elem.c(\n            'property', {\n                name: 'stereo',\n                value: this.options.conference.stereo\n            }).up();\n    }\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\n        elem.c(\n            'property', {\n                name: 'useRoomAsSharedDocumentName',\n                value: this.options.conference.useRoomAsSharedDocumentName\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if focus has auto-detected Jigasi component(this will be also\n    // included if we have passed our host from the config)\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = function(...args) {\n            this._lastSuccess = Date.now();\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","/* global $, __filename */\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\nimport Statistics from '../statistics/statistics';\n\nimport JingleSessionPC from './JingleSessionPC';\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(iceConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace:\\t', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.connection.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n            res => {\n                const iceservers = [];\n\n                $(res).find('>services>service').each((idx, el) => {\n                    // eslint-disable-next-line no-param-reassign\n                    el = $(el);\n                    const dict = {};\n                    const type = el.attr('type');\n\n                    switch (type) {\n                    case 'stun':\n                        dict.urls = `stun:${el.attr('host')}`;\n                        if (el.attr('port')) {\n                            dict.urls += `:${el.attr('port')}`;\n                        }\n                        iceservers.push(dict);\n                        break;\n                    case 'turn':\n                    case 'turns': {\n                        dict.urls = `${type}:`;\n                        const username = el.attr('username');\n\n                        // https://code.google.com/p/webrtc/issues/detail\n                        // ?id=1508\n\n                        if (username) {\n                            const match\n                                = navigator.userAgent.match(\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\n\n                            if (match && parseInt(match[2], 10) < 28) {\n                                dict.urls += `${username}@`;\n                            } else {\n                                // only works in M28\n                                dict.username = username;\n                            }\n                        }\n                        dict.urls += el.attr('host');\n                        const port = el.attr('port');\n\n                        if (port) {\n                            dict.urls += `:${el.attr('port')}`;\n                        }\n                        const transport = el.attr('transport');\n\n                        if (transport && transport !== 'udp') {\n                            dict.urls += `?transport=${transport}`;\n                        }\n\n                        dict.credential = el.attr('password')\n                                || dict.credential;\n                        iceservers.push(dict);\n                        break;\n                    }\n                    }\n                });\n\n                const options = this.xmpp.options;\n\n                // Shuffle ICEServers for loadbalancing\n                for (let i = iceservers.length - 1; i > 0; i--) {\n                    const j = Math.floor(Math.random() * (i + 1));\n                    const temp = iceservers[i];\n\n                    iceservers[i] = iceservers[j];\n                    iceservers[j] = temp;\n                }\n\n                if (options.useStunTurn) {\n                    let filter;\n\n                    if (options.useTurnUdp) {\n                        filter = s => s.urls.startsWith('turn');\n                    } else {\n                        // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n                        filter = s => s.urls.startsWith('turn') && s.urls.indexOf('transport=tcp');\n                    }\n\n                    this.jvbIceConfig.iceServers = iceservers.filter(filter);\n                }\n\n                if (options.p2p && options.p2p.useStunTurn) {\n                    this.p2pIceConfig.iceServers = iceservers;\n                }\n\n            }, err => {\n                logger.warn('getting turn credentials failed', err);\n                logger.warn('is mod_turncredentials or similar installed?');\n            });\n\n        // implement push?\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JingleSessionState from './JingleSessionState';\nimport Listenable from '../util/Listenable';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import async from 'async';\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        task(finishedCallback);\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Ping every 10 sec\n */\nconst PING_INTERVAL = 10000;\n\n/**\n * Ping timeout error after 15 sec of waiting.\n */\nconst PING_TIMEOUT = 15000;\n\n/**\n * Will close the connection after 3 consecutive ping errors.\n */\nconst PING_THRESHOLD = 3;\n\n/**\n * The number of timestamps of send pings to keep.\n * The current value is 2 minutes.\n * @type {number} number of timestamps.\n */\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Contructs new object\n     * @param {XMPP} xmpp the xmpp module.\n     * @constructor\n     */\n    constructor(xmpp) {\n        super();\n        this.failedPings = 0;\n        this.xmpp = xmpp;\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     * @param interval task interval in ms.\n     */\n    startInterval(remoteJid, interval = PING_INTERVAL) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n            this.ping(remoteJid, () => {\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= PING_THRESHOLD) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n\n                    // FIXME it doesn't help to disconnect when 3rd PING\n                    // times out, it only stops Strophe from retrying.\n                    // Not really sure what's the right thing to do in that\n                    // situation, but just closing the connection makes no\n                    // sense.\n                    // self.connection.disconnect();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, PING_TIMEOUT);\n        }, interval);\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= PING_INTERVAL;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * Detect user trying to speek while is locally muted and fires an event.\n */\nexport default class TalkMutedDetection {\n    /**\n     * Creates TalkMutedDetection\n     * @param conference the JitsiConference instance that created us.\n     * @param callback the callback to call when detected that the local user is\n     * talking while her microphone is muted.\n     * @constructor\n     */\n    constructor(conference, callback) {\n        /**\n         * The callback to call when detected that the local user is talking\n         * while her microphone is muted.\n         *\n         * @private\n         */\n        this._callback = callback;\n\n        /**\n         * The indicator which determines whether <tt>callback</tt> has been\n         * invoked for the current local audio track of <tt>conference</tt> so\n         * that it is invoked once only.\n         *\n         * @private\n         */\n        this._eventFired = false;\n\n        // XXX I went back and forth on the subject of where to put the access\n        // to statistics. On the one had, (1) statistics is likely intended to\n        // be private to conference and (2) there is a desire to keep the\n        // dependencies of modules to the minimum (i.e. not have\n        // TalkMutedDetection depend on statistics). On the other hand, (1)\n        // statistics is technically not private because\n        // JitsiConferenceEventManager accesses it and (2) TalkMutedDetection\n        // works exactly because it knows that there are no audio levels for\n        // JitsiLocalTrack but there are audio levels for the local participant\n        // through statistics.\n        conference.statistics.addAudioLevelListener(\n            this._audioLevel.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n        conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            this._trackAdded.bind(this));\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Receives audio level events for all send and receive streams.\n     *\n     * @param {TraceablePeerConnection} pc - WebRTC PeerConnection object of the\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of\n     * the endpoint/participant/stream being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt>.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> represents a\n     * local/send stream or <tt>false</tt> for a remote/receive stream.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio stream only and if event is not\n        // sent yet.\n        if (!isLocal || !this.audioTrack || this._eventFired) {\n            return;\n        }\n\n        if (this.audioTrack.isMuted()\n            && audioLevel > SPEECH_DETECT_THRESHOLD) {\n            this._eventFired = true;\n            this._callback();\n        }\n    }\n    /* eslint-enable max-params */\n\n    /**\n     * Determines whether a specific {@link JitsiTrack} represents a local audio\n     * track.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> to be checked whether\n     * it represents a local audio track.\n     * @private\n     * @return {boolean} - <tt>true</tt> if the specified <tt>track</tt>\n     * represents a local audio track; otherwise, <tt>false</tt>.\n     */\n    _isLocalAudioTrack(track) {\n        return track.isAudioTrack() && track.isLocal();\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that a {@link JitsiTrack} was\n     * added to the associated {@link JitsiConference}. Looks for the local\n     * audio track only.\n     *\n     * @param {JitsiTrack} track - The added <tt>JitsiTrack</tt>.\n     * @private\n     */\n    _trackAdded(track) {\n        if (this._isLocalAudioTrack(track)) {\n            this.audioTrack = track;\n        }\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that the mute state of a\n     * {@link JitsiTrack} has changed. Looks for the local audio track only.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> whose mute state has\n     * changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (this._isLocalAudioTrack(track) && track.isMuted()) {\n            this._eventFired = false;\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n        }\n    }\n}\n","import * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst VideoType = require('../../service/RTC/VideoType');\nconst Resolutions = require('../../service/RTC/Resolutions');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * See media/engine/simulcast.ss from webrtc.org\n */\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        max: 5000,\n        target: 4000,\n        min: 800 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        max: 2500,\n        target: 2500,\n        min: 600 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        max: 900,\n        target: 900,\n        min: 450 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        max: 700,\n        target: 500,\n        min: 150 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        max: 450,\n        target: 350,\n        min: 150 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        max: 200,\n        target: 150,\n        min: 30 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n\n/**\n * The current cap (in kbps) put on the video stream (or null if there isn't\n * a cap).  If there is a cap, we'll take it into account when calculating\n * the current quality.\n */\nlet videoBitrateCap = null;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video started.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    if (simulcast) {\n        // Find the first format with height no bigger than ours.\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n        if (simulcastFormat) {\n            // Sum the target fields from all simulcast layers for the given\n            // resolution (e.g. 720p + 360p + 180p).\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\n                const targetHeight = height;\n\n                simulcastFormat\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\n                if (simulcastFormat) {\n                    target += simulcastFormat.target;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else {\n        // See GetMaxDefaultVideoBitrateKbps in\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\n        const pixels = resolution.width * resolution.height;\n\n        if (pixels <= 320 * 240) {\n            target = 600;\n        } else if (pixels <= 640 * 480) {\n            target = 1700;\n        } else if (pixels <= 960 * 540) {\n            target = 2000;\n        } else {\n            target = 2500;\n        }\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second.\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        /**\n         * The time at which a video bitrate cap was last removed.  We use\n         * this to calculate how much time we, as a sender, have had to\n         * ramp-up\n         */\n        this._timeLastBwCapRemoved = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\n            startBitrate = options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module\n        // and update the _localStats field.\n        // Oh, and by the way, the resolutions of all remote participants are\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\n        // if one carefully reads the *code* (but not the docs) in\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\n        // jitsi-meet\n        // TODO: We should keep track of the remote resolution in _remoteStats,\n        // and notify about changes via separate events.\n        conference.statistics.addConnectionStatsListener(\n            this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or\n     * a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the\n     * camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the sending bitrate.\n\n            // Figure out if simulcast is in use\n            const activeTPC = this._conference.getActivePeerConnection();\n            const isSimulcastOn\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\n\n            const newVideoBitrateCap\n                = activeTPC && activeTPC.bandwidthLimiter\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\n\n            // If we had a cap set but there isn't one now, then it has\n            // just been 'lifted', so we should treat this like a new\n            // ramp up.\n            if (!newVideoBitrateCap && videoBitrateCap) {\n                this._timeLastBwCapRemoved = window.performance.now();\n\n                // Set the start bitrate to whatever we were just capped to\n                startBitrate = videoBitrateCap;\n            }\n            videoBitrateCap = newVideoBitrateCap;\n\n            // time since sending of video was enabled.\n            const millisSinceStart = window.performance.now()\n                - Math.max(this._timeVideoUnmuted,\n                    this._timeIceConnected,\n                    this._timeLastBwCapRemoved);\n\n            // expected sending bitrate in perfect conditions\n            let target\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\n\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\n\n            if (videoBitrateCap) {\n                target = Math.min(target, videoBitrateCap);\n            }\n\n            quality = 100 * this._localStats.bitrate.upload / target;\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\n                    / 1000;\n\n            quality\n                = Math.min(\n                    quality,\n                    prevConnectionQuality\n                        + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.broadcastEndpointMessage({\n                type: STATS_MESSAGE_TYPE,\n                values: data });\n        } catch (e) {\n            // We often hit this in the beginning of a call, before the data\n            // channel is ready. It is not a big problem, because we will\n            // send the statistics again after a few seconds, and the error is\n            // already logged elsewhere. So just ignore it.\n\n            // let errorMsg = \"Failed to broadcast local stats\";\n            // logger.error(errorMsg, e);\n            // GlobalOnErrorHandler.callErrorHandler(\n            //    new Error(errorMsg + \": \" + e));\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack ? localVideoTrack.resolution : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A delayed ICE failed notification which is triggered only if the ICE\n * connection does not recover soon after or before the XMPP connection is\n * restored (if it was ever broken). If ICE fails while the XMPP connection is\n * not broken then the notifications will be sent after 2 seconds delay. This\n * extra delay is not intentional just a side effect of the code.\n * NOTE that this delayed task can only be used if PING is supported by the XMPP\n * server.\n */\nexport default class IceFailedNotification {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * Starts the task.\n     * @param {JingleSessionPC} session - the JVB Jingle session.\n     */\n    start(session) {\n        // The 65 seconds are greater than the default Prosody's BOSH\n        // timeout of 60. This gives some time for the XMPP connection\n        // to recover.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (this._canceled) {\n                    return;\n                }\n\n                const jvbConnection = this._conference.jvbJingleSession;\n                const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n                if (!jvbConnection) {\n                    logger.warn('Not sending ICE failed - no JVB connection');\n                } else if (jvbConnIceState === 'connected') {\n                    logger.info('ICE connection restored - not sending ICE failed');\n                } else {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        logger.info(`Sending ICE failed - the connection has not recovered: ${jvbConnIceState}`);\n                        this._iceFailedTimeout = undefined;\n                        session.sendIceFailedNotification();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error(\n                    'PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        if (this._iceFailedTimeout) {\n            window.clearTimeout(this._iceFailedTimeout);\n        }\n    }\n}\n","/* global __filename */\n\nimport { createWorkerScript } from './Worker';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     *\n     * @param {string} options.salt - Salt to be used for key deviation.\n     *      FIXME: We currently use the MUC room name for this which has the same lifetime\n     *      as this context. While not (pseudo)random as recommended in\n     *        https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params\n     *      this is easily available and the same for all participants.\n     *      We currently do not enforce a minimum length of 16 bytes either.\n     */\n    constructor(options) {\n        this._options = options;\n\n        // Initialize the E2EE worker.\n        this._worker = new Worker(createWorkerScript(), {\n            name: 'E2EE Worker'\n        });\n        this._worker.onerror = e => logger.onerror(e);\n\n        // Initialize the salt and convert it once.\n        const encoder = new TextEncoder();\n\n        // Send initial options to worker.\n        this._worker.postMessage({\n            operation: 'initialize',\n            salt: encoder.encode(options.salt)\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        let receiverStreams;\n\n        if (receiver.createEncodedStreams) {\n            receiverStreams = receiver.createEncodedStreams();\n        } else {\n            receiverStreams = kind === 'video' ? receiver.createEncodedVideoStreams()\n                : receiver.createEncodedAudioStreams();\n        }\n\n        this._worker.postMessage({\n            operation: 'decode',\n            readableStream: receiverStreams.readableStream,\n            writableStream: receiverStreams.writableStream,\n            participantId\n        }, [ receiverStreams.readableStream, receiverStreams.writableStream ]);\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        let senderStreams;\n\n        if (sender.createEncodedStreams) {\n            senderStreams = sender.createEncodedStreams();\n        } else {\n            senderStreams = kind === 'video' ? sender.createEncodedVideoStreams()\n                : sender.createEncodedAudioStreams();\n        }\n\n        this._worker.postMessage({\n            operation: 'encode',\n            readableStream: senderStreams.readableStream,\n            writableStream: senderStreams.writableStream,\n            participantId\n        }, [ senderStreams.readableStream, senderStreams.writableStream ]);\n    }\n\n    /**\n     * Sets the key to be used for E2EE.\n     *\n     * @param {string} value - Value to be used as the new key. May be falsy to disable end-to-end encryption.\n     */\n    setKey(value) {\n        let key;\n\n        if (value) {\n            const encoder = new TextEncoder();\n\n            key = encoder.encode(value);\n        } else {\n            key = false;\n        }\n\n        this._worker.postMessage({\n            operation: 'setKey',\n            key\n        });\n    }\n}\n","// Worker for E2EE/Insertable streams. Currently served as an inline blob.\nconst code = `\n    // Polyfill RTCEncoded(Audio|Video)Frame.getMetadata() (not available in M83, available M84+).\n    // The polyfill can not be done on the prototype since its not exposed in workers. Instead,\n    // it is done as another transformation to keep it separate.\n    function polyFillEncodedFrameMetadata(encodedFrame, controller) {\n      if (!encodedFrame.getMetadata) {\n        encodedFrame.getMetadata = function() {\n          return {\n            // TODO: provide a more complete polyfill based on additionalData for video.\n            synchronizationSource: this.synchronizationSource,\n            contributingSources: this.contributingSources\n          };\n        };\n      }\n      controller.enqueue(encodedFrame);\n    }\n\n    // We use a ringbuffer of keys so we can change them and still decode packets that were\n    // encrypted with an old key.\n    // In the future when we dont rely on a globally shared key we will actually use it. For\n    // now set the size to 1 which means there is only a single key. This causes some\n    // glitches when changing the key but its ok.\n    const keyRingSize = 1;\n\n    // We use a 96 bit IV for AES GCM. This is signalled in plain together with the\n    // packet. See https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\n    const ivLength = 12;\n\n    // We use a 128 bit key for AES GCM.\n    const keyGenParameters = {\n        name: 'AES-GCM',\n        length: 128\n    };\n\n    // We copy the first bytes of the VP8 payload unencrypted.\n    // For keyframes this is 10 bytes, for non-keyframes (delta) 3. See\n    //   https://tools.ietf.org/html/rfc6386#section-9.1\n    // This allows the bridge to continue detecting keyframes (only one byte needed in the JVB)\n    // and is also a bit easier for the VP8 decoder (i.e. it generates funny garbage pictures\n    // instead of being unable to decode).\n    // This is a bit for show and we might want to reduce to 1 unconditionally in the final version.\n    //\n    // For audio (where frame.type is not set) we do not encrypt the opus TOC byte:\n    //   https://tools.ietf.org/html/rfc6716#section-3.1\n    const unencryptedBytes = {\n        key: 10,\n        delta: 3,\n        undefined: 1 // frame.type is not set on audio\n    };\n\n    // Salt used in key derivation\n    // FIXME: We currently use the MUC room name for this which has the same lifetime\n    // as this worker. While not (pseudo)random as recommended in\n    // https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params\n    // this is easily available and the same for all participants.\n    // We currently do not enforce a minimum length of 16 bytes either.\n    let keySalt;\n\n    // Raw keyBytes used to derive the key.\n    let keyBytes;\n\n    /**\n     * Derives a AES-GCM key from the input using PBKDF2\n     * The key length can be configured above and should be either 128 or 256 bits.\n     * @param {Uint8Array} keyBytes - Value to derive key from\n     * @param {Uint8Array} salt - Salt used in key derivation\n     */\n    async function deriveKey(keyBytes, salt) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n        const material = await crypto.subtle.importKey('raw', keyBytes,\n            'PBKDF2', false, [ 'deriveBits', 'deriveKey' ]);\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#PBKDF2\n        return crypto.subtle.deriveKey({\n            name: 'PBKDF2',\n            salt,\n            iterations: 100000,\n            hash: 'SHA-256'\n        }, material, keyGenParameters, false, [ 'encrypt', 'decrypt' ]);\n    }\n\n\n    /** Per-participant context holding the cryptographic keys and\n     * encode/decode functions\n     */\n    class Context {\n        /**\n         * @param {string} id - local muc resourcepart\n         */\n        constructor(id) {\n            // An array (ring) of keys that we use for sending and receiving.\n            this._cryptoKeyRing = new Array(keyRingSize);\n\n            // A pointer to the currently used key.\n            this._currentKeyIndex = -1;\n\n            // We keep track of how many frames we have sent per ssrc.\n            // Starts with a random offset similar to the RTP sequence number.\n            this._sendCounts = new Map();\n\n            this._id = id;\n        }\n\n        /**\n         * Derives a per-participant key.\n         * @param {Uint8Array} keyBytes - Value to derive key from\n         * @param {Uint8Array} salt - Salt used in key derivation\n         */\n        async deriveKey(keyBytes, salt) {\n            const encoder = new TextEncoder();\n            const idBytes = encoder.encode(this._id);\n            // Separate both parts by a null byte to avoid ambiguity attacks.\n            const participantSalt = new Uint8Array(salt.byteLength + idBytes.byteLength + 1);\n            participantSalt.set(salt);\n            participantSalt.set(idBytes, salt.byteLength + 1);\n\n            return deriveKey(keyBytes, participantSalt);\n        }\n        /**\n         * Sets a key and starts using it for encrypting.\n         * @param {CryptoKey} key\n         */\n        setKey(key) {\n            this._currentKeyIndex++;\n            this._cryptoKeyRing[this._currentKeyIndex % this._cryptoKeyRing.length] = key;\n        }\n\n        /**\n         * Construct the IV used for AES-GCM and sent (in plain) with the packet similar to\n         * https://tools.ietf.org/html/rfc7714#section-8.1\n         * It concatenates\n         * - the 32 bit synchronization source (SSRC) given on the encoded frame,\n         * - the 32 bit rtp timestamp given on the encoded frame,\n         * - a send counter that is specific to the SSRC. Starts at a random number.\n         * The send counter is essentially the pictureId but we currently have to implement this ourselves.\n         * There is no XOR with a salt. Note that this IV leaks the SSRC to the receiver but since this is\n         * randomly generated and SFUs may not rewrite this is considered acceptable.\n         * The SSRC is used to allow demultiplexing multiple streams with the same key, as described in\n         *   https://tools.ietf.org/html/rfc3711#section-4.1.1\n         * The RTP timestamp is 32 bits and advances by the codec clock rate (90khz for video, 48khz for\n         * opus audio) every second. For video it rolls over roughly every 13 hours.\n         * The send counter will advance at the frame rate (30fps for video, 50fps for 20ms opus audio)\n         * every second. It will take a long time to roll over.\n         *\n         * See also https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\n         */\n        makeIV(synchronizationSource, timestamp) {\n            const iv = new ArrayBuffer(ivLength);\n            const ivView = new DataView(iv);\n\n            // having to keep our own send count (similar to a picture id) is not ideal.\n            if (!this._sendCounts.has(synchronizationSource)) {\n                // Initialize with a random offset, similar to the RTP sequence number.\n                this._sendCounts.set(synchronizationSource, Math.floor(Math.random() * 0xFFFF));\n            }\n            const sendCount = this._sendCounts.get(synchronizationSource);\n\n            ivView.setUint32(0, synchronizationSource);\n            ivView.setUint32(4, timestamp);\n            ivView.setUint32(8, sendCount % 0xFFFF);\n\n            this._sendCounts.set(synchronizationSource, sendCount + 1);\n\n            return iv;\n        }\n\n        /**\n         * Function that will be injected in a stream and will encrypt the given encoded frames.\n         *\n         * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\n         * @param {TransformStreamDefaultController} controller - TransportStreamController.\n         *\n         * The packet format is described below. One of the design goals was to not require\n         * changes to the SFU which for video requires not encrypting the keyframe bit of VP8\n         * as SFUs need to detect a keyframe (framemarking or the generic frame descriptor will\n         * solve this eventually). This also \"hides\" that a client is using E2EE a bit.\n         *\n         * Note that this operates on the full frame, i.e. for VP8 the data described in\n         *   https://tools.ietf.org/html/rfc6386#section-9.1\n         *\n         * The VP8 payload descriptor described in\n         *   https://tools.ietf.org/html/rfc7741#section-4.2\n         * is part of the RTP packet and not part of the frame and is not controllable by us.\n         * This is fine as the SFU keeps having access to it for routing.\n         *\n         * The encrypted frame is formed as follows:\n         * 1) Leave the first (10, 3, 1) bytes unencrypted, depending on the frame type and kind.\n         * 2) Form the GCM IV for the frame as described above.\n         * 3) Encrypt the rest of the frame using AES-GCM.\n         * 4) Allocate space for the encrypted frame.\n         * 5) Copy the unencrypted bytes to the start of the encrypted frame.\n         * 6) Append the ciphertext to the encrypted frame.\n         * 7) Append the IV.\n         * 8) Append a single byte for the key identifier. TODO: we don't need all the bits.\n         * 9) Enqueue the encrypted frame for sending.\n         */\n        encodeFunction(encodedFrame, controller) {\n            const keyIndex = this._currentKeyIndex % this._cryptoKeyRing.length;\n\n            if (this._cryptoKeyRing[keyIndex]) {\n                const iv = this.makeIV(encodedFrame.getMetadata().synchronizationSource, encodedFrame.timestamp);\n\n                return crypto.subtle.encrypt({\n                    name: 'AES-GCM',\n                    iv,\n                    additionalData: new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])\n                }, this._cryptoKeyRing[keyIndex], new Uint8Array(encodedFrame.data,\n                    unencryptedBytes[encodedFrame.type]))\n                .then(cipherText => {\n                    const newData = new ArrayBuffer(unencryptedBytes[encodedFrame.type] + cipherText.byteLength\n                        + iv.byteLength + 1);\n                    const newUint8 = new Uint8Array(newData);\n\n                    newUint8.set(\n                        new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])); // copy first bytes.\n                    newUint8.set(\n                        new Uint8Array(cipherText), unencryptedBytes[encodedFrame.type]); // add ciphertext.\n                    newUint8.set(\n                        new Uint8Array(iv), unencryptedBytes[encodedFrame.type] + cipherText.byteLength); // append IV.\n                    newUint8[unencryptedBytes[encodedFrame.type] + cipherText.byteLength + ivLength]\n                        = keyIndex; // set key index.\n\n                    encodedFrame.data = newData;\n\n                    return controller.enqueue(encodedFrame);\n                }, e => {\n                    console.error(e);\n\n                    // We are not enqueuing the frame here on purpose.\n                });\n            }\n\n            /* NOTE WELL:\n             * This will send unencrypted data (only protected by DTLS transport encryption) when no key is configured.\n             * This is ok for demo purposes but should not be done once this becomes more relied upon.\n             */\n            controller.enqueue(encodedFrame);\n        }\n\n        /**\n         * Function that will be injected in a stream and will decrypt the given encoded frames.\n         *\n         * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\n         * @param {TransformStreamDefaultController} controller - TransportStreamController.\n         *\n         * The decrypted frame is formed as follows:\n         * 1) Extract the key index from the last byte of the encrypted frame.\n         *    If there is no key associated with the key index, the frame is enqueued for decoding\n         *    and these steps terminate.\n         * 2) Determine the frame type in order to look up the number of unencrypted header bytes.\n         * 2) Extract the 12-byte IV from its position near the end of the packet.\n         *    Note: the IV is treated as opaque and not reconstructed from the input.\n         * 3) Decrypt the encrypted frame content after the unencrypted bytes using AES-GCM.\n         * 4) Allocate space for the decrypted frame.\n         * 5) Copy the unencrypted bytes from the start of the encrypted frame.\n         * 6) Append the plaintext to the decrypted frame.\n         * 7) Enqueue the decrypted frame for decoding.\n         */\n        decodeFunction(encodedFrame, controller) {\n            const data = new Uint8Array(encodedFrame.data);\n            const keyIndex = data[encodedFrame.data.byteLength - 1];\n\n            if (this._cryptoKeyRing[keyIndex]) {\n                const iv = new Uint8Array(encodedFrame.data, encodedFrame.data.byteLength - ivLength - 1, ivLength);\n                const cipherTextStart = unencryptedBytes[encodedFrame.type];\n                const cipherTextLength = encodedFrame.data.byteLength - (unencryptedBytes[encodedFrame.type]\n                    + ivLength + 1);\n\n                return crypto.subtle.decrypt({\n                    name: 'AES-GCM',\n                    iv,\n                    additionalData: new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])\n                }, this._cryptoKeyRing[keyIndex], new Uint8Array(encodedFrame.data, cipherTextStart, cipherTextLength))\n                .then(plainText => {\n                    const newData = new ArrayBuffer(unencryptedBytes[encodedFrame.type] + plainText.byteLength);\n                    const newUint8 = new Uint8Array(newData);\n\n                    newUint8.set(new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type]));\n                    newUint8.set(new Uint8Array(plainText), unencryptedBytes[encodedFrame.type]);\n\n                    encodedFrame.data = newData;\n\n                    return controller.enqueue(encodedFrame);\n                }, e => {\n                    console.error(e);\n\n                    // TODO: notify the application about error status.\n\n                    // TODO: For video we need a better strategy since we do not want to based any\n                    // non-error frames on a garbage keyframe.\n                    if (encodedFrame.type === undefined) { // audio, replace with silence.\n                        // audio, replace with silence.\n                        const newData = new ArrayBuffer(3);\n                        const newUint8 = new Uint8Array(newData);\n\n                        newUint8.set([ 0xd8, 0xff, 0xfe ]); // opus silence frame.\n                        encodedFrame.data = newData;\n                        controller.enqueue(encodedFrame);\n                    }\n                });\n            } else if (keyIndex >= this._cryptoKeyRing.length\n                    && this._cryptoKeyRing[this._currentKeyIndex % this._cryptoKeyRing.length]) {\n                // If we are encrypting but don't have a key for the remote drop the frame.\n                // This is a heuristic since we don't know whether a packet is encrypted,\n                // do not have a checksum and do not have signaling for whether a remote participant does\n                // encrypt or not.\n                return;\n            }\n\n            // TODO: this just passes through to the decoder. Is that ok? If we don't know the key yet\n            // we might want to buffer a bit but it is still unclear how to do that (and for how long etc).\n            controller.enqueue(encodedFrame);\n        }\n    }\n    const contexts = new Map(); // Map participant id => context\n\n    onmessage = async event => {\n        const { operation } = event.data;\n\n        if (operation === 'initialize') {\n            keySalt = event.data.salt;\n        } else if (operation === 'encode') {\n            const { readableStream, writableStream, participantId } = event.data;\n\n            if (!contexts.has(participantId)) {\n                contexts.set(participantId, new Context(participantId));\n            }\n            const context = contexts.get(participantId);\n            const transformStream = new TransformStream({\n                transform: context.encodeFunction.bind(context)\n            });\n\n            readableStream\n                .pipeThrough(new TransformStream({\n                  transform: polyFillEncodedFrameMetadata, // M83 polyfill.\n                }))\n                .pipeThrough(transformStream)\n                .pipeTo(writableStream);\n            if (keyBytes) {\n                context.setKey(await context.deriveKey(keyBytes, keySalt));\n            }\n        } else if (operation === 'decode') {\n            const { readableStream, writableStream, participantId } = event.data;\n\n            if (!contexts.has(participantId)) {\n                contexts.set(participantId, new Context(participantId));\n            }\n            const context = contexts.get(participantId);\n            const transformStream = new TransformStream({\n                transform: context.decodeFunction.bind(context)\n            });\n\n            readableStream\n                .pipeThrough(new TransformStream({\n                  transform: polyFillEncodedFrameMetadata, // M83 polyfill.\n                }))\n                .pipeThrough(transformStream)\n                .pipeTo(writableStream);\n            if (keyBytes) {\n                context.setKey(await context.deriveKey(keyBytes, keySalt));\n            }\n        } else if (operation === 'setKey') {\n            keyBytes = event.data.key;\n            contexts.forEach(async context => {\n                if (keyBytes) {\n                    context.setKey(await context.deriveKey(keyBytes, keySalt));\n                } else {\n                    context.setKey(false);\n                }\n            });\n        } else {\n            console.error('e2ee worker', operation);\n        }\n    };\n`;\n\nexport const createWorkerScript = () => URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import browser from '../browser';\nimport { createRttByRegionEvent }\n    from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport RTCUtils from '../RTC/RTCUtils';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The options to pass to createOffer (we need to offer to receive *something*\n * for the PC to gather candidates.\n */\nconst offerOptions = {\n    offerToReceiveAudio: 1,\n    offerToReceiveVideo: 0\n};\n\n\n/**\n * The interval at which the webrtc engine sends STUN keep alive requests.\n * @type {number}\n */\nconst stunKeepAliveIntervalMs = 10000;\n\n/**\n * Wraps a PeerConnection with one specific STUN server and measures the RTT\n * to the STUN server.\n */\nclass PCMonitor {\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {String} region - The region of the STUN server.\n     * @param {String} address - The address of the STUN server.\n     * @param {number} getStatsIntervalMs how often to call getStats.\n     * @param {number} delay the delay after which the PeerConnection will be\n     * started (that is, createOffer and setLocalDescription will be invoked).\n     *\n     */\n    constructor(region, address, getStatsIntervalMs, delay) {\n        /* eslint-disable max-params */\n        this.region = region;\n        this.getStatsIntervalMs = getStatsIntervalMs;\n        this.getStatsInterval = null;\n\n        // What we consider the current RTT. It is Math.min(this.rtts).\n        this.rtt = Infinity;\n\n        // The RTT measurements we've made from the latest getStats() calls.\n        this.rtts = [];\n\n        const iceServers = [ { 'url': `stun:${address}` } ];\n\n        this.pc = new RTCUtils.RTCPeerConnectionType(\n            {\n                'iceServers': iceServers\n            });\n\n        // Maps a key consisting of the IP address, port and priority of a\n        // candidate to some state related to it. If we have more than one\n        // network interface we will might multiple srflx candidates and this\n        // helps to distinguish between then.\n        this.candidates = {};\n\n        this.stopped = false;\n\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.startStatsInterval = this.startStatsInterval.bind(this);\n        this.handleCandidateRtt = this.handleCandidateRtt.bind(this);\n\n        window.setTimeout(this.start, delay);\n    }\n\n    /**\n     * Starts this PCMonitor. That is, invokes createOffer and\n     * setLocalDescription on the PeerConnection and starts an interval which\n     * calls getStats.\n     */\n    start() {\n        if (this.stopped) {\n            return;\n        }\n\n        this.pc.createOffer(offerOptions).then(offer => {\n            this.pc.setLocalDescription(\n                offer,\n                () => {\n                    logger.info(\n                        `setLocalDescription success for ${this.region}`);\n                    this.startStatsInterval();\n                },\n                error => {\n                    logger.warn(\n                        `setLocalDescription failed for ${this.region}: ${\n                            error}`);\n                }\n            );\n        });\n    }\n\n    /**\n     * Starts an interval which invokes getStats on the PeerConnection and\n     * measures the RTTs for the different candidates.\n     */\n    startStatsInterval() {\n        this.getStatsInterval = window.setInterval(\n            () => {\n                // Note that the data that we use to measure the RTT is only\n                // available in the legacy (callback based) getStats API.\n                this.pc.getStats(stats => {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n                        const rttTotal\n                            = Number(res.stat('stunKeepaliveRttTotal'));\n\n                        // We recognize the results that we care for (local\n                        // candidates of type srflx) by the existance of the\n                        // stunKeepaliveRttTotal stat.\n                        if (rttTotal > 0) {\n                            const candidateKey\n                                = `${res.stat('ipAddress')}_${\n                                    res.stat('portNumber')}_${\n                                    res.stat('priority')}`;\n\n                            this.handleCandidateRtt(\n                                candidateKey,\n                                rttTotal,\n                                Number(\n                                    res.stat('stunKeepaliveResponsesReceived')),\n                                Number(\n                                    res.stat('stunKeepaliveRequestsSent')));\n                        }\n                    }\n\n                    // After we've measured the RTT for all candidates we,\n                    // update the state of the PC with the shortest one.\n                    let rtt = Infinity;\n\n                    for (const key in this.candidates) {\n                        if (this.candidates.hasOwnProperty(key)\n                            && this.candidates[key].rtt > 0) {\n                            rtt = Math.min(rtt, this.candidates[key].rtt);\n                        }\n                    }\n\n                    // We keep the last 6 measured RTTs and choose the shortest\n                    // one to export to analytics. This is because we often see\n                    // failures get a real measurement which end up as Infinity.\n                    this.rtts.push(rtt);\n                    if (this.rtts.length > 6) {\n                        this.rtts = this.rtts.splice(1, 7);\n                    }\n                    this.rtt = Math.min(...this.rtts);\n                });\n            },\n            this.getStatsIntervalMs\n        );\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Updates the RTT for a candidate identified by \"key\" based on the values\n     * from getStats() and the previously saved state (i.e. old values).\n     *\n     * @param {String} key the ID for the candidate\n     * @param {number} rttTotal the value of the 'stunKeepaliveRttTotal' just\n     * measured.\n     * @param {number} responsesReceived the value of the\n     * 'stunKeepaliveResponsesReceived' stat just measured.\n     * @param {number} requestsSent the value of the 'stunKeepaliveRequestsSent'\n     * stat just measured.\n     */\n    handleCandidateRtt(key, rttTotal, responsesReceived, requestsSent) {\n        /* eslist-enable max-params */\n        if (!this.candidates[key]) {\n            this.candidates[key] = {\n                rttTotal: 0,\n                responsesReceived: 0,\n                requestsSent: 0,\n                rtt: NaN\n            };\n        }\n\n        const rttTotalDiff = rttTotal - this.candidates[key].rttTotal;\n        const responsesReceivedDiff\n            = responsesReceived - this.candidates[key].responsesReceived;\n\n        // We observe that when the difference between the number of requests\n        // and responses has grown (i.q. when the value below is positive), the\n        // the RTT measurements are incorrect (too low). For this reason we\n        // ignore these measurement (setting rtt=NaN), but update our state.\n        const requestsResponsesDiff\n            = (requestsSent - responsesReceived)\n            - (this.candidates[key].requestsSent\n                - this.candidates[key].responsesReceived);\n        let rtt = NaN;\n\n        if (responsesReceivedDiff > 0 && requestsResponsesDiff === 0) {\n            rtt = rttTotalDiff / responsesReceivedDiff;\n        }\n\n        this.candidates[key].rttTotal = rttTotal;\n        this.candidates[key].responsesReceived = responsesReceived;\n        this.candidates[key].requestsSent = requestsSent;\n        this.candidates[key].rtt = rtt;\n    }\n\n\n    /**\n     * Stops this PCMonitor, clearing its intervals and stopping the\n     * PeerConnection.\n     */\n    stop() {\n        if (this.getStatsInterval) {\n            window.clearInterval(this.getStatsInterval);\n        }\n\n        this.pc.close();\n\n        this.stopped = true;\n    }\n}\n\n/**\n * A class which monitors the round-trip time (RTT) to a set of STUN servers.\n * The measured RTTs are sent as analytics events. It uses a separate\n * PeerConnection (represented as a PCMonitor) for each STUN server.\n */\nexport default class RttMonitor {\n    /**\n     * Initializes a new RttMonitor.\n     * @param {Object} config the object holding the configuration.\n     */\n    constructor(config) {\n        if (!config || !config.enabled\n            || !browser.supportsLocalCandidateRttStatistics()) {\n            return;\n        }\n\n        // Maps a region to the PCMonitor instance for that region.\n        this.pcMonitors = {};\n\n        this.startPCMonitors = this.startPCMonitors.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n        this.stop = this.stop.bind(this);\n\n        this.analyticsInterval = null;\n        this.stopped = false;\n\n        const initialDelay = config.initialDelay || 60000;\n\n\n        logger.info(\n            `Starting RTT monitor with an initial delay of ${initialDelay}`);\n\n\n        window.setTimeout(\n            () => this.startPCMonitors(config),\n            initialDelay);\n    }\n\n    /**\n     * Starts the PCMonitors according to the configuration.\n     */\n    startPCMonitors(config) {\n        if (!config.stunServers) {\n            logger.warn('No stun servers configured.');\n\n            return;\n        }\n\n        if (this.stopped) {\n            return;\n        }\n\n        const getStatsIntervalMs\n            = config.getStatsInterval || stunKeepAliveIntervalMs;\n        const analyticsIntervalMs\n            = config.analyticsInterval || getStatsIntervalMs;\n        const count = Object.keys(config.stunServers).length;\n        const offset = getStatsIntervalMs / count;\n\n        // We delay the initialization of each PC so that they are uniformly\n        // distributed across the getStatsIntervalMs.\n        let i = 0;\n\n        for (const region in config.stunServers) {\n            if (config.stunServers.hasOwnProperty(region)) {\n                const address = config.stunServers[region];\n\n                this.pcMonitors[region]\n                    = new PCMonitor(\n                        region,\n                        address,\n                        getStatsIntervalMs,\n                        offset * i);\n                i++;\n            }\n        }\n\n        window.setTimeout(\n            () => {\n                if (!this.stopped) {\n                    this.analyticsInterval\n                        = window.setInterval(\n                        this.sendAnalytics, analyticsIntervalMs);\n                }\n            },\n            1000);\n    }\n\n    /**\n     * Sends an analytics event with the measured RTT to each region/STUN\n     * server.\n     */\n    sendAnalytics() {\n        const rtts = {};\n\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                const rtt = this.pcMonitors[region].rtt;\n\n                if (!isNaN(rtt) && rtt !== Infinity) {\n                    rtts[region.replace('-', '_')] = rtt;\n                }\n            }\n        }\n\n        if (rtts) {\n            Statistics.sendAnalytics(createRttByRegionEvent(rtts));\n        }\n    }\n\n    /**\n     * Stops this RttMonitor, clearing all intervals and closing all\n     * PeerConnections.\n     */\n    stop() {\n        logger.info('Stopping RttMonitor.');\n        this.stopped = true;\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                this.pcMonitors[region].stop();\n            }\n        }\n        this.pcMonitors = {};\n\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n}\n","/* global __filename */\nimport isEqual from 'lodash.isequal';\n\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport Statistics from './statistics';\nimport * as VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport SpeakerStats from './SpeakerStats';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio the the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send and receive video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class QualityController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the quality constraints.\n     */\n    constructor(conference) {\n        this.conference = conference;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n        this.preferredReceiveMaxFrameHeight\n            && mediaSession.setReceiverVideoConstraint(this.preferredReceiveMaxFrameHeight);\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (!sendMaxFrameHeight) {\n            return Promise.resolve();\n        }\n\n        for (const session of this.conference._getMediaSessions()) {\n            promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession && activeMediaSession.getRemoteRecvMaxFrameHeight();\n\n        if (this.preferredSendMaxFrameHeight && remoteRecvMaxFrameHeight) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max receive video frame height.\n     * @param {number|undefined} maxFrameHeight - the new value.\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this.preferredReceiveMaxFrameHeight = maxFrameHeight;\n\n        for (const session of this.conference._getMediaSessions()) {\n            maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTC from '../RTC/RTC';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            // FIXME: remove once the temporary code below is gone from\n            //  TraceablePeerConnection.\n            // TraceablePeerConnection:359\n            //  this.rtc.conference.on(\n            //         TRACK_ADDED,\n            //         maybeSetSenderVideoConstraints);\n            //     this.rtc.conference.on(\n            //         TRACK_MUTE_CHANGED,\n            //         maybeSetSenderVideoConstraints);\n            // eslint-disable-next-line no-empty-function\n            on: () => {}\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = media[type].sources.concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            if (!mLine.sources) {\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n\n                // check if there is a m-line that is inactive and is of the same media type\n                const inactiveMid = currentDesc.media\n                    .findIndex(cmLine => cmLine.direction\n                        && cmLine.direction === 'inactive'\n                        && cmLine.type === type);\n\n                if (inactiveMid > -1) {\n                    currentDesc.media[inactiveMid].direction = 'sendonly';\n                    addSourcesToMline(currentDesc.media[inactiveMid], ssrc, ssrc2group, mLine.sources);\n                } else {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = currentDesc.media.length.toString();\n                    newMline.direction = 'sendonly';\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    currentDesc.media.push(newMline);\n                }\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/* global __filename */\n\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport AuthUtil from './modules/util/AuthUtil';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport Logger from 'jitsi-meet-logger';\nimport * as MediaType from './service/RTC/MediaType';\nimport Resolutions from './service/RTC/Resolutions';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport Statistics from './modules/statistics/statistics';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\n\n/**\n * Gets the next lowest desirable resolution to try for a camera. If the given\n * resolution is already the lowest acceptable resolution, returns {@code null}.\n *\n * @param resolution the current resolution\n * @return the next lowest resolution from the given one, or {@code null} if it\n * is already the lowest acceptable resolution.\n */\nfunction getLowerResolution(resolution) {\n    if (!Resolutions[resolution]) {\n        return null;\n    }\n    const order = Resolutions[resolution].order;\n    let res = null;\n    let resName = null;\n\n    Object.keys(Resolutions).forEach(r => {\n        const value = Resolutions[r];\n\n        if (!res || (res.order < value.order && value.order < order)) {\n            resName = r;\n            res = value;\n        }\n    });\n\n    if (resName === resolution) {\n        resName = null;\n    }\n\n    return resName;\n}\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param originalOptions - internal use only, to be able to store the\n     * originally requested options.\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\n        let promiseFulfilled = false;\n\n        if (firePermissionPromptIsShownEvent === true) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                        browser.getName());\n                }\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(options)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(options)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\n                    && !browser.usesNewGumFlow()) {\n                    const oldResolution = options.resolution || '720';\n                    const newResolution = getLowerResolution(oldResolution);\n\n                    if (newResolution !== null) {\n                        options.resolution = newResolution;\n\n                        logger.debug(\n                            'Retry createLocalTracks with resolution',\n                            newResolution);\n\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\n                            'warning',\n                            {\n                                'old_resolution': oldResolution,\n                                'new_resolution': newResolution,\n                                reason: 'unsupported resolution'\n                            }));\n\n                        return this.createLocalTracks(\n                            options,\n                            undefined,\n                            originalOptions || Object.assign({}, options));\n                    }\n\n                    // We tried everything. If there is a mandatory device id,\n                    // remove it and let gum find a device to use.\n                    if (originalOptions\n                        && error.gum.constraints\n                        && error.gum.constraints.video\n                        && error.gum.constraints.video.mandatory\n                        && error.gum.constraints.video.mandatory.sourceId) {\n                        originalOptions.cameraDeviceId = undefined;\n\n                        return this.createLocalTracks(originalOptions);\n                    }\n                }\n\n                if (error.name\n                        === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || !Array.isArray(mLine.invalid)) {\n        return;\n    }\n\n    var i = mLine.invalid.length;\n    while (i--) {\n        if (mLine.invalid[i].value == 'x-google-flag:conference') {\n            mLine.invalid.splice(i, 1);\n        }\n    }\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Make sure that we ALWAYS add the conference flag to the remote\n        // description: That flag is deprecated but, as of this writing\n        // (09/2019), it's still used in jitsi-meet to enable legacy simulcast\n        // when screen-sharing (https://cs.chromium.org/chromium/src/third_party/webrtc/media/base/media_channel.h?rcl=f2773b54647633d5725fa25dea883f99dd1b400c&l=838).\n        //\n        // We've observed the following chain of events that almost always\n        // results in connectivity issues at the receiver:\n        //\n        // 1. The user joins a call with startVideoMuted=true, so there's no\n        //    jitsi track created.\n        // 2. The user enables screen-sharing. At this point we do a\n        //    renegotiation (which starts with an sRD); the ssrcCache is empty,\n        //    so the conference flag is not added to the remote description SDP.\n        // 3. The next step of the re-negotiation is to set the answer, so\n        //    mungeLocalDescription is called, and because now we have a track\n        //    due to the user enabling screen-sharing, it enables simulcast.\n        // 4. sLD is called with simulcast ssrcs, but the sRD call of step 2\n        //    didn't add the conference flag in the SDP, so the screen-sharing\n        //    is without simulcast.\n        // 5. Any subsequent re-negotiation (for example, due to a participant\n        //    joining/leaving the call) will enable simulcast and this switch\n        //    almost always results in a broken stream at the receiver.\n        if (!self.options.usesUnifiedPlan) {\n            assertGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\t// FIXME add a check for proto/connection state DISCONNECTED\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst TranscriptionService = require('./AbstractTranscriptionService');\nconst Word = require('../word');\nconst audioRecorder = require('./../audioRecorder');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        cb(modifiedEvent);\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  const {navigator} = window;\n\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (navigator.mediaDevices &&\n      navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n    result.browser = 'edge';\n    result.version = extractVersion(navigator.userAgent,\n        /Edge\\/(\\d+).(\\d+)$/, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const browserDetails = utils.detectBrowser(window);\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const addIceCandidateNullSupported =\n    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!addIceCandidateNullSupported && !arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions. Native support planned for Chrome M77.\n      if (browserDetails.version < 78 &&\n        arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\nexport function fixNegotiationNeeded(window) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (pc.signalingState !== 'stable') {\n      return;\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  const shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));\n  };\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window) {\n  if (!('getDisplayMedia' in window.navigator)) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    window.navigator.getDisplayMedia.bind(window.navigator);\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nimport {filterIceServers} from './filtericeservers';\nimport shimRTCPeerConnection from 'rtcpeerconnection-shim';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (window.RTCIceGatherer) {\n    if (!window.RTCIceCandidate) {\n      window.RTCIceCandidate = function RTCIceCandidate(args) {\n        return args;\n      };\n    }\n    if (!window.RTCSessionDescription) {\n      window.RTCSessionDescription = function RTCSessionDescription(args) {\n        return args;\n      };\n    }\n    // this adds an additional event listener to MediaStrackTrack that signals\n    // when a tracks enabled property was changed. Workaround for a bug in\n    // addStream, see below. No longer required in 15025+\n    if (browserDetails.version < 15025) {\n      const origMSTEnabled = Object.getOwnPropertyDescriptor(\n          window.MediaStreamTrack.prototype, 'enabled');\n      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n        set(value) {\n          origMSTEnabled.set.call(this, value);\n          const ev = new Event('enabled');\n          ev.enabled = value;\n          this.dispatchEvent(ev);\n        }\n      });\n    }\n  }\n\n  // ORTC defines the DTMF sender a bit different.\n  // https://github.com/w3c/ortc/issues/714\n  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = new window.RTCDtmfSender(this);\n          } else if (this.track.kind === 'video') {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n  // Edge currently only implements the RTCDtmfSender, not the\n  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\n  if (window.RTCDtmfSender && !window.RTCDTMFSender) {\n    window.RTCDTMFSender = window.RTCDtmfSender;\n  }\n\n  const RTCPeerConnectionShim = shimRTCPeerConnection(window,\n      browserDetails.version);\n  window.RTCPeerConnection = function RTCPeerConnection(config) {\n    if (config && config.iceServers) {\n      config.iceServers = filterIceServers(config.iceServers,\n        browserDetails.version);\n      utils.log('ICE servers after filtering:', config.iceServers);\n    }\n    return new RTCPeerConnectionShim(config);\n  };\n  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;\n}\n\nexport function shimReplaceTrack(window) {\n  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n  if (window.RTCRtpSender &&\n      !('replaceTrack' in window.RTCRtpSender.prototype)) {\n    window.RTCRtpSender.prototype.replaceTrack =\n        window.RTCRtpSender.prototype.setTrack;\n  }\n}\n","/*\n *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nexport function filterIceServers(iceServers, edgeVersion) {\n  let hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(server => {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n      }\n      const isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(url => {\n        // filter STUN unconditionally.\n        if (url.indexOf('stun:') === 0) {\n          return false;\n        }\n\n        const validTurn = url.startsWith('turn') &&\n            !url.startsWith('turn:[') &&\n            url.includes('transport=udp');\n        if (validTurn && !hasTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return validTurn && !hasTurn;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window) {\n  const browserDetails = utils.detectBrowser(window);\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  // as well as ignoring {sdpMid, candidate: \"\"}\n  if (browserDetails.version < 68) {\n    const nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      if (arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params)) {\n            params.encodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(\n              sender.setParameters(params)\n              .catch(() => {})\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track) {\n        const stream = arguments[1];\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (!this._localStreams.includes(stream)) {\n            this._localStreams.push(stream);\n          }\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in window.RTCPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeAllowExtmapMixed(window) {\n  /* remove a=extmap-allow-mixed for Chrome < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      desc.sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter = adapterFactory({window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as edgeShim from './edge/edge_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimEdge: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n      chromeShim.shimGetStats(window);\n      chromeShim.shimSenderReceiverGetStats(window);\n      chromeShim.fixNegotiationNeeded(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n      firefoxShim.shimRemoveStream(window);\n      firefoxShim.shimSenderGetStats(window);\n      firefoxShim.shimReceiverGetStats(window);\n      firefoxShim.shimRTCDataChannel(window);\n      firefoxShim.shimAddTransceiver(window);\n      firefoxShim.shimCreateOffer(window);\n      firefoxShim.shimCreateAnswer(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimGetDisplayMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window);\n\n      // the edge shim implements the full RTCIceCandidate object.\n\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCreateOfferLegacy(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n"],"sourceRoot":""}